/*
Ronald Danilo Chávez Calderón
200130586
*/

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.sql.*;

public class MainFrameEmployees extends javax.swing.JFrame {
    
    //Global connection
    Connection connection;
    
    ArrayList<Customer> customers = new ArrayList<>();
    ArrayList<Delivery> deliveries = new ArrayList<>();
    ArrayList<Employee> employees = new ArrayList<>();
    ArrayList<Order> orders = new ArrayList<>();
    ArrayList<OrderReceived> ordersReceived = new ArrayList<>();
    ArrayList<Product> products = new ArrayList<>();
    ArrayList<Sale> sales = new ArrayList<>();
    ArrayList<Store> stores = new ArrayList<>();
    ArrayList<Time> times = new ArrayList<>();
    ArrayList<Sold> solds = new ArrayList<>();
    
    ArrayList<String> sold = new ArrayList<>();
    ArrayList<Product> notSold = new ArrayList<>();
    
    ArrayList<String> textLines = new ArrayList<>();

    public MainFrameEmployees() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneMain = new javax.swing.JTabbedPane();
        jPanelInfo = new javax.swing.JPanel();
        jButtonInfoData = new javax.swing.JPanel();
        jLabelInfoLocalhost = new javax.swing.JLabel();
        jTextFieldInfoLocalhost = new javax.swing.JTextField();
        jLabelInfoUser = new javax.swing.JLabel();
        jTextFieldInfoUser = new javax.swing.JTextField();
        jLabelInfoPassword = new javax.swing.JLabel();
        jPasswordFieldInfoPassword = new javax.swing.JPasswordField();
        jButtonInfoConnect = new javax.swing.JButton();
        jPanelTextAreainfo = new javax.swing.JPanel();
        jScrollPaneInfo = new javax.swing.JScrollPane();
        jTextAreaInfo = new javax.swing.JTextArea();
        jButtonInfoImportData = new javax.swing.JButton();
        jButtonInfoExport = new javax.swing.JButton();
        jButtonInfoOrdersInProcess = new javax.swing.JButton();
        jButtonInfoOrdersReceived = new javax.swing.JButton();
        jLabelInfoOrdersLateDate = new javax.swing.JLabel();
        jComboBoxInfoOrdersLateDate1 = new javax.swing.JComboBox<>();
        jComboBoxInfoOrdersLateDate2 = new javax.swing.JComboBox<>();
        jComboBoxInfoOrdersLateDate3 = new javax.swing.JComboBox<>();
        jButtonInfoOrdersLate = new javax.swing.JButton();
        jLabelInfoBuyingsCustomer = new javax.swing.JLabel();
        jComboBoxInfoBuyingsCustomer = new javax.swing.JComboBox<>();
        jButtonInfoBuyingsCustomer = new javax.swing.JButton();
        jLabelInfoOrdersCustomer = new javax.swing.JLabel();
        jComboBoxInfoOrdersCustomer = new javax.swing.JComboBox<>();
        jButtonInfoOrdersCustomer = new javax.swing.JButton();
        jLabelInfoTopSalesDate1 = new javax.swing.JLabel();
        jComboBoxTopSalesDate1_1 = new javax.swing.JComboBox<>();
        jComboBoxTopSalesDate1_2 = new javax.swing.JComboBox<>();
        jComboBoxTopSalesDate1_3 = new javax.swing.JComboBox<>();
        jLabelInfoTopSalesDate2 = new javax.swing.JLabel();
        jComboBoxTopSalesDate2_1 = new javax.swing.JComboBox<>();
        jComboBoxTopSalesDate2_2 = new javax.swing.JComboBox<>();
        jComboBoxTopSalesDate2_3 = new javax.swing.JComboBox<>();
        jButtonInfoTopSales = new javax.swing.JButton();
        jLabelInfoTopSalesStoreDate1 = new javax.swing.JLabel();
        jComboBoxTopSalesStoreDate1_1 = new javax.swing.JComboBox<>();
        jComboBoxTopSalesStoreDate1_2 = new javax.swing.JComboBox<>();
        jComboBoxTopSalesStoreDate1_3 = new javax.swing.JComboBox<>();
        jLabelInfoTopSalesStoreDate2 = new javax.swing.JLabel();
        jComboBoxTopSalesStoreDate2_1 = new javax.swing.JComboBox<>();
        jComboBoxTopSalesStoreDate2_2 = new javax.swing.JComboBox<>();
        jComboBoxTopSalesStoreDate2_3 = new javax.swing.JComboBox<>();
        jLabelInfoTopSalesStore = new javax.swing.JLabel();
        jComboBoxTopSalesStore = new javax.swing.JComboBox<>();
        jButtonInfoTopSalesStore = new javax.swing.JButton();
        jLabelInfoNoSalesStore = new javax.swing.JLabel();
        jComboBoxInfoNoSalesStore = new javax.swing.JComboBox<>();
        jButtonInfoNoSalesStore = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jPanelIntro = new javax.swing.JPanel();
        jTabbedPaneIntro = new javax.swing.JTabbedPane();
        jPanelStores = new javax.swing.JPanel();
        jLabelStoresName = new javax.swing.JLabel();
        jTextFieldStoresName = new javax.swing.JTextField();
        jLabelStoresAddress = new javax.swing.JLabel();
        jTextFieldStoresAddress = new javax.swing.JTextField();
        jLabelStoresCode = new javax.swing.JLabel();
        jTextFieldStoresCode = new javax.swing.JTextField();
        jLabelStoresPhone1 = new javax.swing.JLabel();
        jTextFieldStoresPhone1 = new javax.swing.JTextField();
        jLabelStoresPhone2 = new javax.swing.JLabel();
        jTextFieldStoresPhone2 = new javax.swing.JTextField();
        jLabelStoresEmail = new javax.swing.JLabel();
        jTextFieldStoresEmail = new javax.swing.JTextField();
        jLabelStoresHours = new javax.swing.JLabel();
        jTextFieldStoresHours = new javax.swing.JTextField();
        jButtonStoresIntro = new javax.swing.JButton();
        jLabelStoresMessage = new javax.swing.JLabel();
        jPanelEmployees = new javax.swing.JPanel();
        jLabelEmployeesName = new javax.swing.JLabel();
        jTextFieldEmployeesName = new javax.swing.JTextField();
        jLabelEmployeesPhone = new javax.swing.JLabel();
        jTextFieldEmployeesPhone = new javax.swing.JTextField();
        jLabelEmployeesCode = new javax.swing.JLabel();
        jTextFieldEmployeesCode = new javax.swing.JTextField();
        jLabelEmployeesDPI = new javax.swing.JLabel();
        jTextFieldEmployeesDPI = new javax.swing.JTextField();
        jButtonEmployeesIntro = new javax.swing.JButton();
        jLabelEmployeesMessage = new javax.swing.JLabel();
        jPanelTime = new javax.swing.JPanel();
        jLabelTimeStore1 = new javax.swing.JLabel();
        jComboBoxTimeStore1 = new javax.swing.JComboBox<>();
        jLabelTimeStore2 = new javax.swing.JLabel();
        jComboBoxTimeStore2 = new javax.swing.JComboBox<>();
        jLabelTimeTime = new javax.swing.JLabel();
        jTextFieldTimeTime = new javax.swing.JTextField();
        jButtonTimeIntro = new javax.swing.JButton();
        jLabelTimeMessage = new javax.swing.JLabel();
        jPanelProducts = new javax.swing.JPanel();
        jLabelProductsName = new javax.swing.JLabel();
        jTextFieldProductsName = new javax.swing.JTextField();
        jLabelProductsMaker = new javax.swing.JLabel();
        jTextFieldProductsMaker = new javax.swing.JTextField();
        jLabelProductsCode = new javax.swing.JLabel();
        jTextFieldProductsCode = new javax.swing.JTextField();
        jLabelProductsQuantity = new javax.swing.JLabel();
        jTextFieldProductsQuantity = new javax.swing.JTextField();
        jLabelProductsPrice = new javax.swing.JLabel();
        jTextFieldProductsPrice = new javax.swing.JTextField();
        jLabelProductsStore = new javax.swing.JLabel();
        jComboBoxProductsStore = new javax.swing.JComboBox<>();
        jLabelProductsDescription = new javax.swing.JLabel();
        jTextFieldProductsDescription = new javax.swing.JTextField();
        jLabelProductsWarranty = new javax.swing.JLabel();
        jTextFieldProductsWarranty = new javax.swing.JTextField();
        jButtonProductsIntro = new javax.swing.JButton();
        jLabelProductsMessage = new javax.swing.JLabel();
        jPanelCustomers = new javax.swing.JPanel();
        jLabelCustomersName = new javax.swing.JLabel();
        jTextFieldCustomersName = new javax.swing.JTextField();
        jLabelCustomersPhone = new javax.swing.JLabel();
        jTextFieldCustomersPhone = new javax.swing.JTextField();
        jLabelCustomersNIT = new javax.swing.JLabel();
        jTextFieldCustomersNIT = new javax.swing.JTextField();
        jLabelCustomersDPI = new javax.swing.JLabel();
        jTextFieldCustomersDPI = new javax.swing.JTextField();
        jLabelCustomersCredit = new javax.swing.JLabel();
        jTextFieldCustomersCredit = new javax.swing.JTextField();
        jLabelCustomersEmail = new javax.swing.JLabel();
        jTextFieldCustomersEmail = new javax.swing.JTextField();
        jLabelCustomersAddress = new javax.swing.JLabel();
        jTextFieldCustomersAddress = new javax.swing.JTextField();
        jButtonCustomersIntro = new javax.swing.JButton();
        jLabelCustomersMessage = new javax.swing.JLabel();
        jPanelSales = new javax.swing.JPanel();
        jLabelSalesStore = new javax.swing.JLabel();
        jComboBoxSalesStore = new javax.swing.JComboBox<>();
        jLabelSalesDate = new javax.swing.JLabel();
        jComboBoxSalesDate1 = new javax.swing.JComboBox<>();
        jComboBoxSalesDate2 = new javax.swing.JComboBox<>();
        jComboBoxSalesDate3 = new javax.swing.JComboBox<>();
        jLabelSalesCustomer = new javax.swing.JLabel();
        jComboBoxSalesCustomer = new javax.swing.JComboBox<>();
        jLabelSalesProduct = new javax.swing.JLabel();
        jComboBoxSalesProduct = new javax.swing.JComboBox<>();
        jButtonSalesQuantity = new javax.swing.JButton();
        jLabelSalesQuantityAvailable = new javax.swing.JLabel();
        jLabelSalesQuantityAvailableNumber = new javax.swing.JLabel();
        jLabelSalesQuantity = new javax.swing.JLabel();
        jTextFieldSalesQuantity = new javax.swing.JTextField();
        jButtonSalesPriceReview = new javax.swing.JButton();
        jLabelSalesPriceReview = new javax.swing.JLabel();
        jLabelSalesPriceReviewNumber = new javax.swing.JLabel();
        jLabelSalesPayment = new javax.swing.JLabel();
        jLabelSalesPaymentNumber = new javax.swing.JLabel();
        jLabelSalesCredit = new javax.swing.JLabel();
        jTextFieldSalesCredit = new javax.swing.JTextField();
        jLabelSalesCreditAvailable = new javax.swing.JLabel();
        jLabelSalesCreditAvailableNumber = new javax.swing.JLabel();
        jButtonSalesIntro = new javax.swing.JButton();
        jLabelSalesMessage = new javax.swing.JLabel();
        jPanelOrders = new javax.swing.JPanel();
        jLabelOrdersStore1 = new javax.swing.JLabel();
        jComboBoxOrdersStore1 = new javax.swing.JComboBox<>();
        jLabelOrdersStore2 = new javax.swing.JLabel();
        jComboBoxOrdersStore2 = new javax.swing.JComboBox<>();
        jLabelOrdersDate = new javax.swing.JLabel();
        jComboBoxOrdersDate1 = new javax.swing.JComboBox<>();
        jComboBoxOrdersDate2 = new javax.swing.JComboBox<>();
        jComboBoxOrdersDate3 = new javax.swing.JComboBox<>();
        jLabelOrdersCustomer = new javax.swing.JLabel();
        jComboBoxOrdersCustomer = new javax.swing.JComboBox<>();
        jLabelOrdersProduct = new javax.swing.JLabel();
        jComboBoxOrdersProduct = new javax.swing.JComboBox<>();
        jButtonOrdersQuantityAvailable = new javax.swing.JButton();
        jLabelOrdersQuantityAvailable = new javax.swing.JLabel();
        jLabelOrdersQuantityAvailableNumber = new javax.swing.JLabel();
        jLabelOrdersQuantity = new javax.swing.JLabel();
        jTextFieldOrdersQuantity = new javax.swing.JTextField();
        jLabelOrdersCreditAvailable = new javax.swing.JLabel();
        jLabelOrdersCreditAvailableNumber = new javax.swing.JLabel();
        jLabelOrdersCustomerCredit = new javax.swing.JLabel();
        jTextFieldOrdersCustomerCredit = new javax.swing.JTextField();
        jButtonOrdersPriceReview = new javax.swing.JButton();
        jLabelOrdersPrice = new javax.swing.JLabel();
        jLabelOrdersPriceNumber = new javax.swing.JLabel();
        jLabelOrdersPaymentTotal = new javax.swing.JLabel();
        jLabelOrdersPaymentTotalNumber = new javax.swing.JLabel();
        jLabelOrdersPaymentDelivery = new javax.swing.JLabel();
        jLabelOrdersPaymentDeliveryNumber = new javax.swing.JLabel();
        jLabelOrdersAdvance = new javax.swing.JLabel();
        jTextFieldOrdersAdvance = new javax.swing.JTextField();
        jLabelOrdersNewCredit = new javax.swing.JLabel();
        jLabelOrdersNewCreditNumber = new javax.swing.JLabel();
        jButtonOrdersIntro = new javax.swing.JButton();
        jLabelOrdersMessage = new javax.swing.JLabel();
        jPanelOrdersReceived = new javax.swing.JPanel();
        jLabelOrdersReceivedCode = new javax.swing.JLabel();
        jComboBoxOrdersReceivedCode = new javax.swing.JComboBox<>();
        jLabelOrdersReceivedDate = new javax.swing.JLabel();
        jLabelOrdersReceivedDateMessage = new javax.swing.JLabel();
        jLabelOrdersReceivedDateArraived = new javax.swing.JLabel();
        jComboBoxOrdersReceivedDateArraived1 = new javax.swing.JComboBox<>();
        jComboBoxOrdersReceivedDateArraived2 = new javax.swing.JComboBox<>();
        jComboBoxOrdersReceivedDateArraived3 = new javax.swing.JComboBox<>();
        jLabelOrdersReceivedStore1 = new javax.swing.JLabel();
        jLabelOrdersReceivedStore1Message = new javax.swing.JLabel();
        jLabelOrdersReceivedStore2 = new javax.swing.JLabel();
        jLabelOrdersReceivedStore2Message = new javax.swing.JLabel();
        jLabelOrdersReceivedCustomer = new javax.swing.JLabel();
        jLabelOrdersReceivedCustomerMessage = new javax.swing.JLabel();
        jLabelOrdersReceivedProduct = new javax.swing.JLabel();
        jLabelOrdersReceivedProductMessage = new javax.swing.JLabel();
        jLabelOrdersReceivedQuantity = new javax.swing.JLabel();
        jLabelOrdersReceivedQuantityNumber = new javax.swing.JLabel();
        jLabelOrdersReceivedPayment = new javax.swing.JLabel();
        jLabelOrdersReceivedPaymentNumber = new javax.swing.JLabel();
        jLabelOrdersReceivedAdvance = new javax.swing.JLabel();
        jLabelOrdersReceivedAdvanceNumber = new javax.swing.JLabel();
        jLabelOrdersReceivedCreditUsed = new javax.swing.JLabel();
        jLabelOrdersReceivedCreditUsedNumber = new javax.swing.JLabel();
        jButtonOrdersReceivedIntro = new javax.swing.JButton();
        jLabelOrdersReceivedMessage = new javax.swing.JLabel();
        jPanelDelivery = new javax.swing.JPanel();
        jLabelDeliveryCode = new javax.swing.JLabel();
        jComboBoxDeliveryCode = new javax.swing.JComboBox<>();
        jLabelDeliveryDate = new javax.swing.JLabel();
        jLabelDeliveryDateMessage = new javax.swing.JLabel();
        jLabelDeliveryDateArraived = new javax.swing.JLabel();
        jComboBoxDeliveryDateDelivery1 = new javax.swing.JComboBox<>();
        jComboBoxDeliveryDateDelivery2 = new javax.swing.JComboBox<>();
        jComboBoxDeliveryDateDelivery3 = new javax.swing.JComboBox<>();
        jLabelDeliveryStore1 = new javax.swing.JLabel();
        jLabelDeliveryStore1Message = new javax.swing.JLabel();
        jLabelDeliveryStore2 = new javax.swing.JLabel();
        jLabelDeliveryStore2Message = new javax.swing.JLabel();
        jLabelDeliveryCustomer = new javax.swing.JLabel();
        jLabelDeliveryCustomerMessage = new javax.swing.JLabel();
        jLabelDeliveryProduct = new javax.swing.JLabel();
        jLabelDeliveryProductMessage = new javax.swing.JLabel();
        jLabelDeliveryQuantity = new javax.swing.JLabel();
        jLabelDeliveryQuantityNumber = new javax.swing.JLabel();
        jLabelDeliveryPayment = new javax.swing.JLabel();
        jLabelDeliveryPaymentNumber = new javax.swing.JLabel();
        jLabelDeliveryAdvance = new javax.swing.JLabel();
        jLabelDeliveryAdvancetNumber = new javax.swing.JLabel();
        jLabelDeliveryCreditUsed = new javax.swing.JLabel();
        jLabelDeliveryCreditUsedNumber = new javax.swing.JLabel();
        jButtonDeliveryIntro = new javax.swing.JButton();
        jLabelDeliveryMessage = new javax.swing.JLabel();
        jPanelDataBase = new javax.swing.JPanel();
        jTabbedPaneDataBase = new javax.swing.JTabbedPane();
        jPanelQuery = new javax.swing.JPanel();
        jScrollPaneDataBase = new javax.swing.JScrollPane();
        jTextAreaDataBase = new javax.swing.JTextArea();
        jLabelDataBaseStoresName = new javax.swing.JLabel();
        jTextFieldDataBaseStoresName = new javax.swing.JTextField();
        jLabelDataBaseStoresCode = new javax.swing.JLabel();
        jTextFieldDataBaseStoresCode = new javax.swing.JTextField();
        jButtonDataBaseStores = new javax.swing.JButton();
        jSeparatorDataBase1 = new javax.swing.JSeparator();
        jLabelDataBaseEmployeesName = new javax.swing.JLabel();
        jTextFieldDataBaseEmployeesName = new javax.swing.JTextField();
        jLabelDataBaseEmployeesCode = new javax.swing.JLabel();
        jTextFieldDataBaseEmployeesCode = new javax.swing.JTextField();
        jButtonDataBaseEmployees = new javax.swing.JButton();
        jSeparatorDataBase2 = new javax.swing.JSeparator();
        jButtonDataBaseTime = new javax.swing.JButton();
        jSeparatorDataBase3 = new javax.swing.JSeparator();
        jLabelDataBaseProductsName = new javax.swing.JLabel();
        jTextFieldDataBaseProductsName = new javax.swing.JTextField();
        jLabelDataBaseProductsCode = new javax.swing.JLabel();
        jTextFieldDataBaseProductsCode = new javax.swing.JTextField();
        jLabelDataBaseProductsStore = new javax.swing.JLabel();
        jTextFieldDataBaseProductsStore = new javax.swing.JTextField();
        jButtonDataBaseProducts = new javax.swing.JButton();
        jSeparatorDataBase4 = new javax.swing.JSeparator();
        jLabelDataBaseCustomersName = new javax.swing.JLabel();
        jTextFieldDataBaseCustomersName = new javax.swing.JTextField();
        jLabelDataBaseCustomersNIT = new javax.swing.JLabel();
        jTextFieldDataBaseCustomersNIT = new javax.swing.JTextField();
        jButtonDataBaseCustomers = new javax.swing.JButton();
        jSeparatorDataBase5 = new javax.swing.JSeparator();
        jButtonDataBaseOrders = new javax.swing.JButton();
        jButtonDataBaseOrdersReceived = new javax.swing.JButton();
        jButtonDataBaseSales = new javax.swing.JButton();
        jButtonDataBaseDelivery = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("INTELAF EMPLEADOS - 200130586_Ronald Danilo Chávez");
        setResizable(false);

        jLabelInfoLocalhost.setText("Host");

        jTextFieldInfoLocalhost.setText("jdbc:mysql://localhost:3306");

        jLabelInfoUser.setText("Usuario");

        jTextFieldInfoUser.setText("root");

        jLabelInfoPassword.setText("Contraseña");

        jButtonInfoConnect.setText("CONECTARSE CON LA BASE DE DATOS");
        jButtonInfoConnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInfoConnectMouseClicked(evt);
            }
        });

        jTextAreaInfo.setEditable(false);
        jTextAreaInfo.setColumns(20);
        jTextAreaInfo.setRows(5);
        jScrollPaneInfo.setViewportView(jTextAreaInfo);

        javax.swing.GroupLayout jPanelTextAreainfoLayout = new javax.swing.GroupLayout(jPanelTextAreainfo);
        jPanelTextAreainfo.setLayout(jPanelTextAreainfoLayout);
        jPanelTextAreainfoLayout.setHorizontalGroup(
            jPanelTextAreainfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneInfo)
        );
        jPanelTextAreainfoLayout.setVerticalGroup(
            jPanelTextAreainfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneInfo, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jButtonInfoImportData.setText("Importar datos desde archivo");
        jButtonInfoImportData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInfoImportDataMouseClicked(evt);
            }
        });

        jButtonInfoExport.setText("Exportar reporte");
        jButtonInfoExport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInfoExportMouseClicked(evt);
            }
        });

        jButtonInfoOrdersInProcess.setText("Pedidos en proceso");
        jButtonInfoOrdersInProcess.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInfoOrdersInProcessMouseClicked(evt);
            }
        });

        jButtonInfoOrdersReceived.setText("Pedidos recibidos");
        jButtonInfoOrdersReceived.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInfoOrdersReceivedMouseClicked(evt);
            }
        });

        jLabelInfoOrdersLateDate.setText("Fecha de hoy");

        jComboBoxInfoOrdersLateDate1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jComboBoxInfoOrdersLateDate2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jComboBoxInfoOrdersLateDate3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        jButtonInfoOrdersLate.setText("Pedidos atrasados");
        jButtonInfoOrdersLate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInfoOrdersLateMouseClicked(evt);
            }
        });

        jLabelInfoBuyingsCustomer.setText("NIT cliente");

        jComboBoxInfoBuyingsCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBoxInfoBuyingsCustomerMouseEntered(evt);
            }
        });

        jButtonInfoBuyingsCustomer.setText("Compras cliente");
        jButtonInfoBuyingsCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInfoBuyingsCustomerMouseClicked(evt);
            }
        });

        jLabelInfoOrdersCustomer.setText("NIT Cliente");

        jComboBoxInfoOrdersCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBoxInfoOrdersCustomerMouseEntered(evt);
            }
        });

        jButtonInfoOrdersCustomer.setText("Pedidos cliente");
        jButtonInfoOrdersCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInfoOrdersCustomerMouseClicked(evt);
            }
        });

        jLabelInfoTopSalesDate1.setText("Fecha 1");

        jComboBoxTopSalesDate1_1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jComboBoxTopSalesDate1_2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jComboBoxTopSalesDate1_3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        jLabelInfoTopSalesDate2.setText("Fecha 2");

        jComboBoxTopSalesDate2_1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jComboBoxTopSalesDate2_2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jComboBoxTopSalesDate2_3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        jButtonInfoTopSales.setText("10 productos más vendidos");
        jButtonInfoTopSales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInfoTopSalesMouseClicked(evt);
            }
        });

        jLabelInfoTopSalesStoreDate1.setText("Fecha 1");

        jComboBoxTopSalesStoreDate1_1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jComboBoxTopSalesStoreDate1_2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jComboBoxTopSalesStoreDate1_3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        jLabelInfoTopSalesStoreDate2.setText("Fecha 2");

        jComboBoxTopSalesStoreDate2_1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jComboBoxTopSalesStoreDate2_2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jComboBoxTopSalesStoreDate2_3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        jLabelInfoTopSalesStore.setText("Tienda");

        jButtonInfoTopSalesStore.setText("10 productos más vendidos por tienda");
        jButtonInfoTopSalesStore.setActionCommand("Productos más vendidos por tienda");
        jButtonInfoTopSalesStore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInfoTopSalesStoreMouseClicked(evt);
            }
        });

        jLabelInfoNoSalesStore.setText("Tienda");

        jButtonInfoNoSalesStore.setText("Productos no vendidos");
        jButtonInfoNoSalesStore.setActionCommand("Productos no vendidos por tienda");
        jButtonInfoNoSalesStore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonInfoNoSalesStoreMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jButtonInfoDataLayout = new javax.swing.GroupLayout(jButtonInfoData);
        jButtonInfoData.setLayout(jButtonInfoDataLayout);
        jButtonInfoDataLayout.setHorizontalGroup(
            jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jButtonInfoDataLayout.createSequentialGroup()
                        .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelInfoLocalhost, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldInfoLocalhost, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldInfoUser)
                            .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                                .addComponent(jLabelInfoUser, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 117, Short.MAX_VALUE))))
                    .addComponent(jPanelTextAreainfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonInfoConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonInfoImportData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonInfoExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonInfoOrdersInProcess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonInfoOrdersReceived, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonInfoOrdersLate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jButtonInfoDataLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPasswordFieldInfoPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonInfoBuyingsCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(jButtonInfoTopSales, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonInfoOrdersCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonInfoTopSalesStore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonInfoNoSalesStore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxTopSalesStore, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxInfoNoSalesStore, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator4)
                    .addComponent(jSeparator5)
                    .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                        .addComponent(jComboBoxTopSalesStoreDate1_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxTopSalesStoreDate1_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxTopSalesStoreDate1_3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxTopSalesStoreDate2_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxTopSalesStoreDate2_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxTopSalesStoreDate2_3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBoxInfoBuyingsCustomer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                        .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelInfoPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                                .addComponent(jLabelInfoTopSalesStoreDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(jLabelInfoTopSalesStoreDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelInfoTopSalesStore, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelInfoNoSalesStore, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                                .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                                        .addComponent(jComboBoxTopSalesDate1_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBoxTopSalesDate1_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBoxTopSalesDate1_3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabelInfoTopSalesDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelInfoTopSalesDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                                        .addComponent(jComboBoxTopSalesDate2_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBoxTopSalesDate2_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBoxTopSalesDate2_3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabelInfoBuyingsCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelInfoOrdersCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelInfoOrdersLateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                                .addComponent(jComboBoxInfoOrdersLateDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxInfoOrdersLateDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxInfoOrdersLateDate3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jComboBoxInfoOrdersCustomer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jButtonInfoDataLayout.setVerticalGroup(
            jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInfoUser)
                    .addComponent(jLabelInfoPassword)
                    .addComponent(jLabelInfoLocalhost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordFieldInfoPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldInfoLocalhost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldInfoUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonInfoConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonInfoOrdersInProcess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                        .addComponent(jPanelTextAreainfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addComponent(jButtonInfoImportData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonInfoExport))
                    .addGroup(jButtonInfoDataLayout.createSequentialGroup()
                        .addComponent(jButtonInfoOrdersReceived)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelInfoOrdersLateDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxInfoOrdersLateDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxInfoOrdersLateDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxInfoOrdersLateDate3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonInfoOrdersLate)
                        .addGap(23, 23, 23)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelInfoBuyingsCustomer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxInfoBuyingsCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jButtonInfoBuyingsCustomer)
                        .addGap(9, 9, 9)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelInfoOrdersCustomer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxInfoOrdersCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jButtonInfoOrdersCustomer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelInfoTopSalesDate1)
                            .addComponent(jLabelInfoTopSalesDate2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxTopSalesDate1_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTopSalesDate1_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTopSalesDate1_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTopSalesDate2_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTopSalesDate2_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTopSalesDate2_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonInfoTopSales)
                        .addGap(5, 5, 5)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelInfoTopSalesStoreDate1)
                            .addComponent(jLabelInfoTopSalesStoreDate2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jButtonInfoDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxTopSalesStoreDate1_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTopSalesStoreDate1_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTopSalesStoreDate1_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTopSalesStoreDate2_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTopSalesStoreDate2_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTopSalesStoreDate2_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelInfoTopSalesStore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxTopSalesStore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonInfoTopSalesStore)
                        .addGap(4, 4, 4)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabelInfoNoSalesStore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxInfoNoSalesStore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonInfoNoSalesStore)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelInfoLayout = new javax.swing.GroupLayout(jPanelInfo);
        jPanelInfo.setLayout(jPanelInfoLayout);
        jPanelInfoLayout.setHorizontalGroup(
            jPanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButtonInfoData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelInfoLayout.setVerticalGroup(
            jPanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfoLayout.createSequentialGroup()
                .addComponent(jButtonInfoData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPaneMain.addTab("Consultar Datos", jPanelInfo);

        jLabelStoresName.setText("Nombre (Obligatorio)");

        jLabelStoresAddress.setText("Dirección (Obligatorio)");

        jLabelStoresCode.setText("Código (Obligatorio)");

        jLabelStoresPhone1.setText("Teléfono 1");

        jTextFieldStoresPhone1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldStoresPhone1KeyTyped(evt);
            }
        });

        jLabelStoresPhone2.setText("Teléfono 2");

        jTextFieldStoresPhone2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldStoresPhone2KeyTyped(evt);
            }
        });

        jLabelStoresEmail.setText("Correo Electrónico");

        jLabelStoresHours.setText("Horario");

        jButtonStoresIntro.setText("Introducir Tienda");
        jButtonStoresIntro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonStoresIntroMouseClicked(evt);
            }
        });

        jLabelStoresMessage.setText("Introduzca la tienda");

        javax.swing.GroupLayout jPanelStoresLayout = new javax.swing.GroupLayout(jPanelStores);
        jPanelStores.setLayout(jPanelStoresLayout);
        jPanelStoresLayout.setHorizontalGroup(
            jPanelStoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelStoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelStoresMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelStoresLayout.createSequentialGroup()
                        .addGroup(jPanelStoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldStoresPhone1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldStoresAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldStoresCode, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldStoresPhone2, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldStoresEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldStoresHours, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldStoresName)
                            .addComponent(jButtonStoresIntro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelStoresPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStoresPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStoresHours, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStoresEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStoresCode, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStoresAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelStoresName, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 467, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelStoresLayout.setVerticalGroup(
            jPanelStoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelStoresName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldStoresName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelStoresAddress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldStoresAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelStoresCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldStoresCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelStoresPhone1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldStoresPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelStoresPhone2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldStoresPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelStoresEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldStoresEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelStoresHours)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldStoresHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonStoresIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelStoresMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(324, Short.MAX_VALUE))
        );

        jTabbedPaneIntro.addTab("Tiendas", jPanelStores);

        jLabelEmployeesName.setText("Nombres y Apellidos (Obligatorio)");

        jLabelEmployeesPhone.setText("Teléfono (Obligatorio)");

        jTextFieldEmployeesPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldEmployeesPhoneKeyTyped(evt);
            }
        });

        jLabelEmployeesCode.setText("Código (Obligatorio)");

        jLabelEmployeesDPI.setText("DPI (Obligatorio)");

        jTextFieldEmployeesDPI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldEmployeesDPIKeyTyped(evt);
            }
        });

        jButtonEmployeesIntro.setText("Introducir Empleado");
        jButtonEmployeesIntro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonEmployeesIntroMouseClicked(evt);
            }
        });

        jLabelEmployeesMessage.setText("Introduzca el empleado");

        javax.swing.GroupLayout jPanelEmployeesLayout = new javax.swing.GroupLayout(jPanelEmployees);
        jPanelEmployees.setLayout(jPanelEmployeesLayout);
        jPanelEmployeesLayout.setHorizontalGroup(
            jPanelEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEmployeesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelEmployeesMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelEmployeesLayout.createSequentialGroup()
                        .addGroup(jPanelEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldEmployeesName, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldEmployeesPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldEmployeesCode, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldEmployeesDPI, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jButtonEmployeesIntro, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jLabelEmployeesPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelEmployeesCode, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelEmployeesDPI, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelEmployeesName, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 467, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelEmployeesLayout.setVerticalGroup(
            jPanelEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEmployeesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelEmployeesName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldEmployeesName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelEmployeesPhone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldEmployeesPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelEmployeesCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldEmployeesCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelEmployeesDPI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldEmployeesDPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonEmployeesIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelEmployeesMessage)
                .addContainerGap(476, Short.MAX_VALUE))
        );

        jTabbedPaneIntro.addTab("Empleados", jPanelEmployees);

        jLabelTimeStore1.setText("Tienda 1 (Obligatorio)");

        jLabelTimeStore2.setText("Tienda 2 (Obligatorio)");

        jLabelTimeTime.setText("Tiempo (Obligatorio)");

        jTextFieldTimeTime.setText("0");

        jButtonTimeIntro.setText("Introducir Tiempos");
        jButtonTimeIntro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonTimeIntroMouseClicked(evt);
            }
        });

        jLabelTimeMessage.setText("Introduzca el tiempo");

        javax.swing.GroupLayout jPanelTimeLayout = new javax.swing.GroupLayout(jPanelTime);
        jPanelTime.setLayout(jPanelTimeLayout);
        jPanelTimeLayout.setHorizontalGroup(
            jPanelTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTimeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTimeMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelTimeLayout.createSequentialGroup()
                        .addGroup(jPanelTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxTimeStore1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxTimeStore2, 0, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldTimeTime)
                            .addComponent(jButtonTimeIntro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelTimeStore1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTimeStore2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTimeTime, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 467, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelTimeLayout.setVerticalGroup(
            jPanelTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTimeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTimeStore1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxTimeStore1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTimeStore2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxTimeStore2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTimeTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldTimeTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonTimeIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelTimeMessage)
                .addContainerGap(508, Short.MAX_VALUE))
        );

        jTabbedPaneIntro.addTab("Tiempo", jPanelTime);

        jLabelProductsName.setText("Nombre (Obligatorio)");

        jLabelProductsMaker.setText("Fabricante (Obligatorio)");

        jLabelProductsCode.setText("Código (Obligatorio)");

        jLabelProductsQuantity.setText("Cantidad (Obligatorio)");

        jTextFieldProductsQuantity.setText("0");
        jTextFieldProductsQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldProductsQuantityKeyTyped(evt);
            }
        });

        jLabelProductsPrice.setText("Precio (Obligatorio)");

        jTextFieldProductsPrice.setText("0.0");
        jTextFieldProductsPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldProductsPriceKeyTyped(evt);
            }
        });

        jLabelProductsStore.setText("Tienda (Obligatorio)");

        jLabelProductsDescription.setText("Descripción");

        jLabelProductsWarranty.setText("Garantía");

        jButtonProductsIntro.setText("Introducir Producto");
        jButtonProductsIntro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonProductsIntroMouseClicked(evt);
            }
        });

        jLabelProductsMessage.setText("Introduzca el producto");

        javax.swing.GroupLayout jPanelProductsLayout = new javax.swing.GroupLayout(jPanelProducts);
        jPanelProducts.setLayout(jPanelProductsLayout);
        jPanelProductsLayout.setHorizontalGroup(
            jPanelProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProductsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelProductsMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelProductsLayout.createSequentialGroup()
                        .addGroup(jPanelProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxProductsStore, 0, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldProductsName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldProductsMaker, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldProductsCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldProductsQuantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldProductsPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldProductsDescription, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jLabelProductsWarranty, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldProductsWarranty, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jButtonProductsIntro, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jLabelProductsName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelProductsMaker, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelProductsCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelProductsQuantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelProductsPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelProductsDescription, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelProductsStore, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 467, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelProductsLayout.setVerticalGroup(
            jPanelProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProductsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelProductsName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldProductsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelProductsMaker)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldProductsMaker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelProductsCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldProductsCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelProductsQuantity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldProductsQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelProductsPrice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldProductsPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelProductsStore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxProductsStore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabelProductsDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldProductsDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelProductsWarranty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldProductsWarranty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonProductsIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelProductsMessage)
                .addContainerGap(279, Short.MAX_VALUE))
        );

        jTabbedPaneIntro.addTab("Productos", jPanelProducts);

        jLabelCustomersName.setText("Nombres y Apellidos (Obligatorio)");

        jLabelCustomersPhone.setText("Teléfono (Obligatorio)");

        jTextFieldCustomersPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldCustomersPhoneKeyTyped(evt);
            }
        });

        jLabelCustomersNIT.setText("NIT (Obligatorio)");

        jLabelCustomersDPI.setText("DPI");

        jTextFieldCustomersDPI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldCustomersDPIKeyTyped(evt);
            }
        });

        jLabelCustomersCredit.setText("Crédito de Compra");

        jTextFieldCustomersCredit.setText("0.0");

        jLabelCustomersEmail.setText("Correo Electrónico");

        jLabelCustomersAddress.setText("Dirección");

        jButtonCustomersIntro.setText("Introducir Cliente");
        jButtonCustomersIntro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCustomersIntroMouseClicked(evt);
            }
        });

        jLabelCustomersMessage.setText("Introduzca el cliente");

        javax.swing.GroupLayout jPanelCustomersLayout = new javax.swing.GroupLayout(jPanelCustomers);
        jPanelCustomers.setLayout(jPanelCustomersLayout);
        jPanelCustomersLayout.setHorizontalGroup(
            jPanelCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCustomersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelCustomersMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelCustomersLayout.createSequentialGroup()
                        .addGroup(jPanelCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldCustomersName, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldCustomersPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldCustomersNIT, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldCustomersDPI, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldCustomersCredit, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldCustomersEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jTextFieldCustomersAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jButtonCustomersIntro, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jLabelCustomersPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCustomersNIT, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCustomersDPI, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCustomersCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCustomersEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCustomersAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCustomersName, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 467, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelCustomersLayout.setVerticalGroup(
            jPanelCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCustomersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCustomersName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCustomersName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelCustomersPhone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCustomersPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelCustomersNIT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCustomersNIT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelCustomersDPI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCustomersDPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelCustomersCredit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCustomersCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelCustomersEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCustomersEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelCustomersAddress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCustomersAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonCustomersIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelCustomersMessage)
                .addContainerGap(325, Short.MAX_VALUE))
        );

        jTabbedPaneIntro.addTab("Clientes", jPanelCustomers);

        jLabelSalesStore.setText("Tienda (Obligatorio)");

        jLabelSalesDate.setText("Fecha (Obligatorio)");

        jComboBoxSalesDate1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jComboBoxSalesDate2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jComboBoxSalesDate3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        jLabelSalesCustomer.setText("NIT del cliente (Obligatorio)");

        jComboBoxSalesCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBoxSalesCustomerMouseEntered(evt);
            }
        });

        jLabelSalesProduct.setText("Producto (Obligatorio)");

        jComboBoxSalesProduct.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxSalesProductItemStateChanged(evt);
            }
        });
        jComboBoxSalesProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBoxSalesProductMouseEntered(evt);
            }
        });

        jButtonSalesQuantity.setText("Revisar la cantidad disponible");
        jButtonSalesQuantity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSalesQuantityMouseClicked(evt);
            }
        });

        jLabelSalesQuantityAvailable.setText("Cantidad disponible: ");

        jLabelSalesQuantityAvailableNumber.setText("0");

        jLabelSalesQuantity.setText("Cantidad (Obligatorio)");

        jTextFieldSalesQuantity.setText("0");
        jTextFieldSalesQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldSalesQuantityKeyTyped(evt);
            }
        });

        jButtonSalesPriceReview.setText("Revisar el precio a pagar");
        jButtonSalesPriceReview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSalesPriceReviewMouseClicked(evt);
            }
        });

        jLabelSalesPriceReview.setText("Precio por unidad en Quetzales");

        jLabelSalesPriceReviewNumber.setText("0.0");

        jLabelSalesPayment.setText("Pago total en Quetzales");

        jLabelSalesPaymentNumber.setText("0.0");

        jLabelSalesCredit.setText("Credito en Quetzales (Obligatorio)");

        jTextFieldSalesCredit.setText("0.0");
        jTextFieldSalesCredit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldSalesCreditKeyTyped(evt);
            }
        });

        jLabelSalesCreditAvailable.setText("Disponible:");

        jLabelSalesCreditAvailableNumber.setText("0.0");

        jButtonSalesIntro.setText("Introducir Venta");
        jButtonSalesIntro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSalesIntroMouseClicked(evt);
            }
        });

        jLabelSalesMessage.setText("Introduzca la venta");

        javax.swing.GroupLayout jPanelSalesLayout = new javax.swing.GroupLayout(jPanelSales);
        jPanelSales.setLayout(jPanelSalesLayout);
        jPanelSalesLayout.setHorizontalGroup(
            jPanelSalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSalesMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelSalesLayout.createSequentialGroup()
                        .addGroup(jPanelSalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxSalesProduct, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanelSalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonSalesIntro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBoxSalesStore, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelSalesStore, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelSalesCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                                    .addComponent(jLabelSalesDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelSalesProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelSalesQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldSalesQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanelSalesLayout.createSequentialGroup()
                                    .addComponent(jComboBoxSalesDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jComboBoxSalesDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jComboBoxSalesDate3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jComboBoxSalesCustomer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSalesQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelSalesQuantityAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelSalesQuantityAvailableNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSalesPriceReview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelSalesPriceReviewNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelSalesCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelSalesLayout.createSequentialGroup()
                                .addComponent(jTextFieldSalesCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelSalesCreditAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelSalesCreditAvailableNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelSalesPriceReview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelSalesPaymentNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelSalesPayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 434, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelSalesLayout.setVerticalGroup(
            jPanelSalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSalesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSalesStore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSalesStore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSalesDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSalesDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSalesDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSalesDate3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSalesCustomer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSalesCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSalesProduct)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxSalesProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSalesQuantity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSalesQuantityAvailable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSalesQuantityAvailableNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelSalesQuantity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldSalesQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSalesPriceReview)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSalesPriceReview)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSalesPriceReviewNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSalesPayment)
                .addGap(7, 7, 7)
                .addComponent(jLabelSalesPaymentNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelSalesCredit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSalesCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSalesCreditAvailable)
                    .addComponent(jLabelSalesCreditAvailableNumber))
                .addGap(18, 18, 18)
                .addComponent(jButtonSalesIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelSalesMessage)
                .addContainerGap(178, Short.MAX_VALUE))
        );

        jTabbedPaneIntro.addTab("Ventas", jPanelSales);

        jLabelOrdersStore1.setText("Tienda 1 (Obligatorio)");

        jLabelOrdersStore2.setText("Tienda 2 (Obligatorio)");

        jLabelOrdersDate.setText("Fecha (Obligatorio)");

        jComboBoxOrdersDate1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jComboBoxOrdersDate2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jComboBoxOrdersDate3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        jLabelOrdersCustomer.setText("NIT del cliente (Obligatorio)");

        jComboBoxOrdersCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBoxOrdersCustomerMouseEntered(evt);
            }
        });

        jLabelOrdersProduct.setText("Producto (Obligatorio)");

        jComboBoxOrdersProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBoxOrdersProductMouseEntered(evt);
            }
        });

        jButtonOrdersQuantityAvailable.setText("Revisar la cantidad disponible");
        jButtonOrdersQuantityAvailable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOrdersQuantityAvailableMouseClicked(evt);
            }
        });

        jLabelOrdersQuantityAvailable.setText("Cantidad disponible: ");

        jLabelOrdersQuantityAvailableNumber.setText("0");

        jLabelOrdersQuantity.setText("Cantidad (Obligatorio)");

        jTextFieldOrdersQuantity.setText("0");
        jTextFieldOrdersQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldOrdersQuantityKeyTyped(evt);
            }
        });

        jLabelOrdersCreditAvailable.setText("Crédito disponible: ");

        jLabelOrdersCreditAvailableNumber.setText("0");

        jLabelOrdersCustomerCredit.setText("Crédito (Obligatorio)");

        jTextFieldOrdersCustomerCredit.setText("0");
        jTextFieldOrdersCustomerCredit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldOrdersCustomerCreditKeyTyped(evt);
            }
        });

        jButtonOrdersPriceReview.setText("Revisar el precio a pagar");
        jButtonOrdersPriceReview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOrdersPriceReviewMouseClicked(evt);
            }
        });

        jLabelOrdersPrice.setText("Precio por unidad en Quetzales");

        jLabelOrdersPriceNumber.setText("0.0");

        jLabelOrdersPaymentTotal.setText("Pago total en Quetzales");

        jLabelOrdersPaymentTotalNumber.setText("0.0");

        jLabelOrdersPaymentDelivery.setText("Pago al entregar el producto en Quetzales");

        jLabelOrdersPaymentDeliveryNumber.setText("0.0");

        jLabelOrdersAdvance.setText("Anticipo en Quetzales al menos 25% (Obligatorio)");

        jTextFieldOrdersAdvance.setText("0.0");
        jTextFieldOrdersAdvance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldOrdersAdvanceKeyTyped(evt);
            }
        });

        jLabelOrdersNewCredit.setText("Crédito añadido al cliente en Quetzales");

        jLabelOrdersNewCreditNumber.setText("0.0");

        jButtonOrdersIntro.setText("Introducir Pedido");
        jButtonOrdersIntro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOrdersIntroMouseClicked(evt);
            }
        });

        jLabelOrdersMessage.setText("Introduzca el pedido");

        javax.swing.GroupLayout jPanelOrdersLayout = new javax.swing.GroupLayout(jPanelOrders);
        jPanelOrders.setLayout(jPanelOrdersLayout);
        jPanelOrdersLayout.setHorizontalGroup(
            jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOrdersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOrdersLayout.createSequentialGroup()
                        .addGroup(jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxOrdersStore2, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxOrdersStore1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxOrdersCustomer, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelOrdersLayout.createSequentialGroup()
                                .addGroup(jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelOrdersProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelOrdersStore1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelOrdersStore2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelOrdersLayout.createSequentialGroup()
                                        .addComponent(jComboBoxOrdersDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBoxOrdersDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBoxOrdersDate3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 154, Short.MAX_VALUE))
                            .addComponent(jComboBoxOrdersProduct, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(477, 477, 477))
                    .addGroup(jPanelOrdersLayout.createSequentialGroup()
                        .addGroup(jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanelOrdersLayout.createSequentialGroup()
                                .addComponent(jLabelOrdersQuantityAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelOrdersQuantityAvailableNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldOrdersQuantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonOrdersQuantityAvailable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersQuantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabelOrdersMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelOrdersLayout.createSequentialGroup()
                        .addGroup(jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabelOrdersPaymentTotalNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelOrdersPaymentTotal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelOrdersPriceNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelOrdersPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonOrdersPriceReview, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanelOrdersLayout.createSequentialGroup()
                                    .addComponent(jLabelOrdersCreditAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabelOrdersCreditAvailableNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabelOrdersCustomerCredit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextFieldOrdersCustomerCredit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButtonOrdersIntro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelOrdersNewCreditNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelOrdersNewCredit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldOrdersAdvance, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelOrdersAdvance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelOrdersPaymentDelivery, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelOrdersPaymentDeliveryNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanelOrdersLayout.setVerticalGroup(
            jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOrdersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelOrdersStore1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxOrdersStore1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabelOrdersStore2)
                .addGap(4, 4, 4)
                .addComponent(jComboBoxOrdersStore2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxOrdersDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxOrdersDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxOrdersDate3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersCustomer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxOrdersCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabelOrdersProduct)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxOrdersProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOrdersQuantityAvailable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOrdersQuantityAvailable)
                    .addComponent(jLabelOrdersQuantityAvailableNumber))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersQuantity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldOrdersQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOrdersCreditAvailable)
                    .addComponent(jLabelOrdersCreditAvailableNumber))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersCustomerCredit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldOrdersCustomerCredit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOrdersPriceReview)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersPriceNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersPaymentTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersPaymentTotalNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelOrdersPaymentDelivery, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersPaymentDeliveryNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersAdvance, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldOrdersAdvance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersNewCredit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersNewCreditNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOrdersIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelOrdersMessage)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jTabbedPaneIntro.addTab("Pedidos", jPanelOrders);

        jLabelOrdersReceivedCode.setText("Código");

        jComboBoxOrdersReceivedCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxOrdersReceivedCodeItemStateChanged(evt);
            }
        });
        jComboBoxOrdersReceivedCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBoxOrdersReceivedCodeMouseEntered(evt);
            }
        });

        jLabelOrdersReceivedDate.setText("Fecha de salida:");

        jLabelOrdersReceivedDateMessage.setText("2000-01-01");

        jLabelOrdersReceivedDateArraived.setText("Fecha de llegada");

        jComboBoxOrdersReceivedDateArraived1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jComboBoxOrdersReceivedDateArraived2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jComboBoxOrdersReceivedDateArraived3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        jLabelOrdersReceivedStore1.setText("Tienda 1:");

        jLabelOrdersReceivedStore1Message.setText("Teinda 1");

        jLabelOrdersReceivedStore2.setText("Tienda 2:");

        jLabelOrdersReceivedStore2Message.setText("Teinda 2");

        jLabelOrdersReceivedCustomer.setText("NIT del cliente:");

        jLabelOrdersReceivedCustomerMessage.setText("NIT del cliente");

        jLabelOrdersReceivedProduct.setText("Producto:");

        jLabelOrdersReceivedProductMessage.setText("Producto");

        jLabelOrdersReceivedQuantity.setText("Cantidad:");

        jLabelOrdersReceivedQuantityNumber.setText("0");

        jLabelOrdersReceivedPayment.setText("Pago al entregar el producto en Quetzales:");

        jLabelOrdersReceivedPaymentNumber.setText("0.0");

        jLabelOrdersReceivedAdvance.setText("Anticipo en Quetzales:");

        jLabelOrdersReceivedAdvanceNumber.setText("0.0");

        jLabelOrdersReceivedCreditUsed.setText("Crédito utilizado en Quetzales:");

        jLabelOrdersReceivedCreditUsedNumber.setText("0.0");

        jButtonOrdersReceivedIntro.setText("Introducir Pedido Recibido");
        jButtonOrdersReceivedIntro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOrdersReceivedIntroMouseClicked(evt);
            }
        });

        jLabelOrdersReceivedMessage.setText("Introduzca el pedido recibido");

        javax.swing.GroupLayout jPanelOrdersReceivedLayout = new javax.swing.GroupLayout(jPanelOrdersReceived);
        jPanelOrdersReceived.setLayout(jPanelOrdersReceivedLayout);
        jPanelOrdersReceivedLayout.setHorizontalGroup(
            jPanelOrdersReceivedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOrdersReceivedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOrdersReceivedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelOrdersReceivedMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelOrdersReceivedLayout.createSequentialGroup()
                        .addGroup(jPanelOrdersReceivedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelOrdersReceivedDateMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedAdvanceNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedPaymentNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedQuantityNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedProductMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedCustomerMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedStore2Message, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonOrdersReceivedIntro, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedCode, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelOrdersReceivedStore1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelOrdersReceivedStore2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelOrdersReceivedProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelOrdersReceivedQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelOrdersReceivedCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedAdvance, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxOrdersReceivedCode, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedStore1Message, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelOrdersReceivedLayout.createSequentialGroup()
                                .addComponent(jComboBoxOrdersReceivedDateArraived1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxOrdersReceivedDateArraived2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxOrdersReceivedDateArraived3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelOrdersReceivedDateArraived, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedCreditUsedNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedCreditUsed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelOrdersReceivedPayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 467, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelOrdersReceivedLayout.setVerticalGroup(
            jPanelOrdersReceivedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOrdersReceivedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelOrdersReceivedCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxOrdersReceivedCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelOrdersReceivedDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersReceivedDateMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersReceivedDateArraived)
                .addGap(7, 7, 7)
                .addGroup(jPanelOrdersReceivedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxOrdersReceivedDateArraived1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxOrdersReceivedDateArraived2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxOrdersReceivedDateArraived3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelOrdersReceivedStore1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersReceivedStore1Message)
                .addGap(12, 12, 12)
                .addComponent(jLabelOrdersReceivedStore2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersReceivedStore2Message)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersReceivedCustomer)
                .addGap(7, 7, 7)
                .addComponent(jLabelOrdersReceivedCustomerMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelOrdersReceivedProduct)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersReceivedProductMessage)
                .addGap(12, 12, 12)
                .addComponent(jLabelOrdersReceivedQuantity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersReceivedQuantityNumber)
                .addGap(17, 17, 17)
                .addComponent(jLabelOrdersReceivedPayment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersReceivedPaymentNumber)
                .addGap(17, 17, 17)
                .addComponent(jLabelOrdersReceivedAdvance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersReceivedAdvanceNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersReceivedCreditUsed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelOrdersReceivedCreditUsedNumber)
                .addGap(18, 18, 18)
                .addComponent(jButtonOrdersReceivedIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelOrdersReceivedMessage)
                .addContainerGap(142, Short.MAX_VALUE))
        );

        jTabbedPaneIntro.addTab("Pedidos Recibidos", jPanelOrdersReceived);

        jLabelDeliveryCode.setText("Código");

        jComboBoxDeliveryCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxDeliveryCodeItemStateChanged(evt);
            }
        });
        jComboBoxDeliveryCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBoxDeliveryCodeMouseEntered(evt);
            }
        });

        jLabelDeliveryDate.setText("Fecha de llegada:");

        jLabelDeliveryDateMessage.setText("2000-01-01");

        jLabelDeliveryDateArraived.setText("Fecha de entrega");

        jComboBoxDeliveryDateDelivery1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jComboBoxDeliveryDateDelivery2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jComboBoxDeliveryDateDelivery3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        jLabelDeliveryStore1.setText("Tienda 1:");

        jLabelDeliveryStore1Message.setText("Teinda 1");

        jLabelDeliveryStore2.setText("Tienda 2:");

        jLabelDeliveryStore2Message.setText("Teinda 2");

        jLabelDeliveryCustomer.setText("NIT del cliente:");

        jLabelDeliveryCustomerMessage.setText("NIT del cliente");

        jLabelDeliveryProduct.setText("Producto:");

        jLabelDeliveryProductMessage.setText("Producto");

        jLabelDeliveryQuantity.setText("Cantidad:");

        jLabelDeliveryQuantityNumber.setText("Cantidad");

        jLabelDeliveryPayment.setText("Pago al entregar el producto en Quetzales:");

        jLabelDeliveryPaymentNumber.setText("0.0");

        jLabelDeliveryAdvance.setText("Anticipo en Quetzales:");

        jLabelDeliveryAdvancetNumber.setText("0.0");

        jLabelDeliveryCreditUsed.setText("Credito utilizado en Quetzales:");

        jLabelDeliveryCreditUsedNumber.setText("0.0");

        jButtonDeliveryIntro.setText("Introducir Pedido Recibido");
        jButtonDeliveryIntro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDeliveryIntroMouseClicked(evt);
            }
        });

        jLabelDeliveryMessage.setText("Introduzca el pedido recibido");

        javax.swing.GroupLayout jPanelDeliveryLayout = new javax.swing.GroupLayout(jPanelDelivery);
        jPanelDelivery.setLayout(jPanelDeliveryLayout);
        jPanelDeliveryLayout.setHorizontalGroup(
            jPanelDeliveryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDeliveryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDeliveryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDeliveryMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelDeliveryLayout.createSequentialGroup()
                        .addGroup(jPanelDeliveryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelDeliveryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabelDeliveryDateMessage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryAdvancetNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryPaymentNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryQuantityNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryProductMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryCustomerMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryStore2Message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonDeliveryIntro, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryStore1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelDeliveryStore2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelDeliveryProduct, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelDeliveryQuantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelDeliveryCustomer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryAdvance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBoxDeliveryCode, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryStore1Message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelDeliveryLayout.createSequentialGroup()
                                    .addComponent(jComboBoxDeliveryDateDelivery1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jComboBoxDeliveryDateDelivery2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jComboBoxDeliveryDateDelivery3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabelDeliveryDateArraived, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryPayment, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanelDeliveryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabelDeliveryCreditUsedNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                                .addComponent(jLabelDeliveryCreditUsed, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 467, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelDeliveryLayout.setVerticalGroup(
            jPanelDeliveryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDeliveryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelDeliveryCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxDeliveryCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelDeliveryDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeliveryDateMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeliveryDateArraived)
                .addGap(7, 7, 7)
                .addGroup(jPanelDeliveryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxDeliveryDateDelivery1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDeliveryDateDelivery2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDeliveryDateDelivery3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelDeliveryStore1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeliveryStore1Message)
                .addGap(12, 12, 12)
                .addComponent(jLabelDeliveryStore2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeliveryStore2Message)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeliveryCustomer)
                .addGap(7, 7, 7)
                .addComponent(jLabelDeliveryCustomerMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelDeliveryProduct)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeliveryProductMessage)
                .addGap(12, 12, 12)
                .addComponent(jLabelDeliveryQuantity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeliveryQuantityNumber)
                .addGap(17, 17, 17)
                .addComponent(jLabelDeliveryPayment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeliveryPaymentNumber)
                .addGap(17, 17, 17)
                .addComponent(jLabelDeliveryAdvance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeliveryAdvancetNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeliveryCreditUsed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDeliveryCreditUsedNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonDeliveryIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelDeliveryMessage)
                .addContainerGap(149, Short.MAX_VALUE))
        );

        jTabbedPaneIntro.addTab("Entregas al cliente", jPanelDelivery);

        javax.swing.GroupLayout jPanelIntroLayout = new javax.swing.GroupLayout(jPanelIntro);
        jPanelIntro.setLayout(jPanelIntroLayout);
        jPanelIntroLayout.setHorizontalGroup(
            jPanelIntroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIntroLayout.createSequentialGroup()
                .addComponent(jTabbedPaneIntro, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 34, Short.MAX_VALUE))
        );
        jPanelIntroLayout.setVerticalGroup(
            jPanelIntroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneIntro, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPaneIntro.getAccessibleContext().setAccessibleName("Entregas");

        jTabbedPaneMain.addTab("Introducir Datos", jPanelIntro);

        jTextAreaDataBase.setEditable(false);
        jTextAreaDataBase.setColumns(20);
        jTextAreaDataBase.setRows(5);
        jScrollPaneDataBase.setViewportView(jTextAreaDataBase);

        jLabelDataBaseStoresName.setText("Nombre:");

        jLabelDataBaseStoresCode.setText("Código:");

        jButtonDataBaseStores.setText("Tiendas");
        jButtonDataBaseStores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDataBaseStoresMouseClicked(evt);
            }
        });

        jLabelDataBaseEmployeesName.setText("Nombre:");

        jLabelDataBaseEmployeesCode.setText("Código:");

        jButtonDataBaseEmployees.setText("Empleados");
        jButtonDataBaseEmployees.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDataBaseEmployeesMouseClicked(evt);
            }
        });

        jButtonDataBaseTime.setText("Tiempo entre tiendas");
        jButtonDataBaseTime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDataBaseTimeMouseClicked(evt);
            }
        });

        jLabelDataBaseProductsName.setText("Nombre:");

        jLabelDataBaseProductsCode.setText("Código:");

        jLabelDataBaseProductsStore.setText("Tienda:");

        jButtonDataBaseProducts.setText("Productos");
        jButtonDataBaseProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDataBaseProductsMouseClicked(evt);
            }
        });

        jLabelDataBaseCustomersName.setText("Nombre:");

        jLabelDataBaseCustomersNIT.setText("NIT:");

        jButtonDataBaseCustomers.setText("Clientes");
        jButtonDataBaseCustomers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDataBaseCustomersMouseClicked(evt);
            }
        });

        jButtonDataBaseOrders.setText("Pedidos");
        jButtonDataBaseOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDataBaseOrdersMouseClicked(evt);
            }
        });

        jButtonDataBaseOrdersReceived.setText("Pedidos recibidos");
        jButtonDataBaseOrdersReceived.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDataBaseOrdersReceivedMouseClicked(evt);
            }
        });

        jButtonDataBaseSales.setText("Ventas");
        jButtonDataBaseSales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDataBaseSalesMouseClicked(evt);
            }
        });

        jButtonDataBaseDelivery.setText("Entregas");
        jButtonDataBaseDelivery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDataBaseDeliveryMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelQueryLayout = new javax.swing.GroupLayout(jPanelQuery);
        jPanelQuery.setLayout(jPanelQueryLayout);
        jPanelQueryLayout.setHorizontalGroup(
            jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQueryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneDataBase, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDataBaseEmployees, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDataBaseTime, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                    .addComponent(jButtonDataBaseProducts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDataBaseCustomers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDataBaseOrders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDataBaseOrdersReceived, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDataBaseSales, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDataBaseDelivery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDataBaseStores, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelQueryLayout.createSequentialGroup()
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelDataBaseStoresName, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                            .addComponent(jLabelDataBaseStoresCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldDataBaseStoresName)
                            .addComponent(jTextFieldDataBaseStoresCode)))
                    .addComponent(jSeparatorDataBase1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelQueryLayout.createSequentialGroup()
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelDataBaseEmployeesName, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                            .addComponent(jLabelDataBaseEmployeesCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldDataBaseEmployeesName)
                            .addComponent(jTextFieldDataBaseEmployeesCode)))
                    .addComponent(jSeparatorDataBase2)
                    .addComponent(jSeparatorDataBase3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelQueryLayout.createSequentialGroup()
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelDataBaseProductsName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelDataBaseProductsCode, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldDataBaseProductsName)
                            .addComponent(jTextFieldDataBaseProductsCode)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelQueryLayout.createSequentialGroup()
                        .addComponent(jLabelDataBaseProductsStore, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldDataBaseProductsStore))
                    .addComponent(jSeparatorDataBase4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelQueryLayout.createSequentialGroup()
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelDataBaseCustomersName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelDataBaseCustomersNIT, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldDataBaseCustomersName)
                            .addComponent(jTextFieldDataBaseCustomersNIT)))
                    .addComponent(jSeparatorDataBase5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanelQueryLayout.setVerticalGroup(
            jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelQueryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneDataBase, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE)
                    .addGroup(jPanelQueryLayout.createSequentialGroup()
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDataBaseStoresName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataBaseStoresName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDataBaseStoresCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataBaseStoresCode))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDataBaseStores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparatorDataBase1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDataBaseEmployeesName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataBaseEmployeesName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDataBaseEmployeesCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataBaseEmployeesCode))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDataBaseEmployees)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparatorDataBase2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDataBaseTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparatorDataBase3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDataBaseProductsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataBaseProductsName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDataBaseProductsCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataBaseProductsCode))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDataBaseProductsStore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataBaseProductsStore))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDataBaseProducts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparatorDataBase4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDataBaseCustomersName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataBaseCustomersName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelQueryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDataBaseCustomersNIT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataBaseCustomersNIT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDataBaseCustomers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparatorDataBase5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDataBaseSales)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDataBaseOrders)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDataBaseOrdersReceived)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDataBaseDelivery)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPaneDataBase.addTab("Consultas", jPanelQuery);

        javax.swing.GroupLayout jPanelDataBaseLayout = new javax.swing.GroupLayout(jPanelDataBase);
        jPanelDataBase.setLayout(jPanelDataBaseLayout);
        jPanelDataBaseLayout.setHorizontalGroup(
            jPanelDataBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneDataBase)
        );
        jPanelDataBaseLayout.setVerticalGroup(
            jPanelDataBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneDataBase, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPaneMain.addTab("Base de Datos de consulta", jPanelDataBase);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPaneMain)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPaneMain)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /***
     * Introduce the store's information
     * @param evt 
     */
    
    private void jButtonStoresIntroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonStoresIntroMouseClicked
        //To upload data to the table
        if ( !( jTextFieldStoresName.getText().equals("") || jTextFieldStoresAddress.getText().equals("") || jTextFieldStoresCode.getText().equals("") ) ) {
        
            jLabelStoresMessage.setText("Introduciendo tienda");
            System.out.println("Introduciendo tienda");
            
            try {                             
                PreparedStatement ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`store` (`name`,`address`,`code`,`phone1`,`phone2`,`email`,`hours`) VALUES (?,?,?,?,?,?,?);");
                
                ps.setString(1, jTextFieldStoresName.getText());
                ps.setString(2, jTextFieldStoresAddress.getText());
                ps.setString(3, jTextFieldStoresCode.getText());
                ps.setString(4, jTextFieldStoresPhone1.getText());
                ps.setString(5, jTextFieldStoresPhone2.getText());
                ps.setString(6, jTextFieldStoresEmail.getText());
                ps.setString(7, jTextFieldStoresHours.getText());
                
                ps.executeUpdate();
                jLabelStoresMessage.setText(jTextFieldStoresCode.getText() + " introducido con éxito");
                System.out.println(jTextFieldStoresCode.getText() + " introducido con éxito");
                
                //***********************
                // To fill the stores in the comboboxes
                ResultSet rs = ps.executeQuery("SELECT `code` FROM `200130586_ipc2_proyecto1`.`store` ORDER BY `code`;");
                
                // We need to clear all comboboxes
                jComboBoxTopSalesStore.removeAllItems();
                jComboBoxInfoNoSalesStore.removeAllItems();
                jComboBoxTimeStore1.removeAllItems();
                jComboBoxTimeStore2.removeAllItems();
                jComboBoxProductsStore.removeAllItems();
                jComboBoxOrdersStore1.removeAllItems();
                jComboBoxOrdersStore2.removeAllItems();
                jComboBoxSalesStore.removeAllItems();               
                
                while (rs.next())
                {
                    jComboBoxTopSalesStore.addItem(rs.getString("code"));
                    jComboBoxInfoNoSalesStore.addItem(rs.getString("code"));
                    jComboBoxTimeStore1.addItem(rs.getString("code"));
                    jComboBoxTimeStore2.addItem(rs.getString("code"));
                    jComboBoxProductsStore.addItem(rs.getString("code"));
                    jComboBoxOrdersStore1.addItem(rs.getString("code"));
                    jComboBoxOrdersStore2.addItem(rs.getString("code"));
                    jComboBoxSalesStore.addItem(rs.getString("code"));
                }
                //***********************    
                
                ps.close(); 
            }
            catch (Exception e){
                jLabelStoresMessage.setText("No se pudo introducir la tienda");
                System.out.println("No se pudo introducir la tienda");            
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            } 
        }
        else {
            jLabelStoresMessage.setText("Por favor introduzca los campos obligatorios");
            System.out.println("Por favor introduzca los campos obligatorios");
        }
    }//GEN-LAST:event_jButtonStoresIntroMouseClicked

    /***
     * To connect to MySQL database server
     * @param evt 
     */
    
    private void jButtonInfoConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInfoConnectMouseClicked
        jTextAreaInfo.setText("");
        jTextAreaInfo.append("\nConectando con la base de datos, por favor espere un momento");   

        // To find the password converted to String
        String myPassword = "";
        char[] myPasswordArray = jPasswordFieldInfoPassword.getPassword();
        for (int i = 0; i < myPasswordArray.length; i++) {
            myPassword += myPasswordArray[i];
        }        
        
        try {       
            // creating our mysql database connection
            String myDriver = "com.mysql.cj.jdbc.Driver";
            Class.forName(myDriver);
            // it appears it is not necessary this "jdbc:mysql://localhost/mysql"
            // it is recommended "jdbc:mysql://localhost:3306"
            //String myUrl = "jdbc:mysql://localhost:3306";            
            //Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306", "root", "123456789");
            connection = DriverManager.getConnection(jTextFieldInfoLocalhost.getText(),jTextFieldInfoUser.getText(),myPassword);
            System.out.println("CONNECTION ESTABLISHED!");

            String update1 = "CREATE SCHEMA IF NOT EXISTS `200130586_ipc2_proyecto1`;";
            String update2 = "USE `200130586_ipc2_proyecto1`;";
            String update3 = "CREATE TABLE IF NOT EXISTS `200130586_ipc2_proyecto1`.`store` (`name` VARCHAR(60) NOT NULL DEFAULT '*',`address` VARCHAR(60) NOT NULL DEFAULT '*',`code` VARCHAR(60) NOT NULL DEFAULT '*',`phone1` VARCHAR(60) NOT NULL DEFAULT '*',`phone2` VARCHAR(60) NOT NULL DEFAULT '*',`email` VARCHAR(60) NOT NULL DEFAULT '*',`hours` VARCHAR(60) NOT NULL DEFAULT '*',PRIMARY KEY (`code`),UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE);";
            String update4 = "CREATE TABLE IF NOT EXISTS `200130586_ipc2_proyecto1`.`employee` (`name` VARCHAR(60) NOT NULL DEFAULT '*',`code` VARCHAR(60) NOT NULL DEFAULT '*',`phone` VARCHAR(60) NOT NULL DEFAULT '*',`DPI` VARCHAR(60) NOT NULL DEFAULT '*',PRIMARY KEY (`code`),UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE);";
            String update5 = "CREATE TABLE IF NOT EXISTS `200130586_ipc2_proyecto1`.`time` (`code` VARCHAR(60) NOT NULL DEFAULT '*',`store1` VARCHAR(60) NOT NULL DEFAULT '*',`store2` VARCHAR(60) NOT NULL DEFAULT '*',`time` VARCHAR(60) NOT NULL DEFAULT '*',PRIMARY KEY (`code`));";
            String update6 = "CREATE TABLE IF NOT EXISTS `200130586_ipc2_proyecto1`.`product` (`name` VARCHAR(60) NOT NULL DEFAULT '*',`maker` VARCHAR(60) NOT NULL DEFAULT '*',`code` VARCHAR(60) NOT NULL DEFAULT '*',`quantity` VARCHAR(60) NOT NULL DEFAULT '0',`price` VARCHAR(60) NOT NULL DEFAULT '0.0',`store` VARCHAR(60) NOT NULL DEFAULT '*',`description` VARCHAR(60) NOT NULL DEFAULT '*',`warranty` VARCHAR(60) NOT NULL DEFAULT '*',PRIMARY KEY (`code`),UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE);";
            String update7 = "CREATE TABLE IF NOT EXISTS `200130586_ipc2_proyecto1`.`customer` (`name` VARCHAR(60) NOT NULL DEFAULT '*',`phone` VARCHAR(60) NOT NULL DEFAULT '*',`NIT` VARCHAR(60) NOT NULL DEFAULT '*' PRIMARY KEY,`DPI` VARCHAR(60) NOT NULL DEFAULT '*',`credit` VARCHAR(60) NOT NULL DEFAULT '0.0',`email` VARCHAR(60) NOT NULL DEFAULT '*',`address` VARCHAR(60) NOT NULL DEFAULT '*');";
            String update8 = "CREATE TABLE IF NOT EXISTS `200130586_ipc2_proyecto1`.`order` (`code` VARCHAR(60) NOT NULL DEFAULT '*',`store1` VARCHAR(60) NOT NULL DEFAULT '*',`store2` VARCHAR(60) NOT NULL DEFAULT '*',`date` DATE NOT NULL DEFAULT '2020-08-25',`customer` VARCHAR(60) NOT NULL DEFAULT '*',`product` VARCHAR(60) NOT NULL DEFAULT '*',`quantity` VARCHAR(60) NOT NULL DEFAULT '0',`payment` VARCHAR(60) NOT NULL DEFAULT '0.0',`advance` VARCHAR(60) NOT NULL DEFAULT '0.0',`creditused` VARCHAR(60) NOT NULL DEFAULT '0.0',PRIMARY KEY (`code`),UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE);";
            String update9 = "CREATE TABLE IF NOT EXISTS `200130586_ipc2_proyecto1`.`orderreceived` (`code` VARCHAR(60) NOT NULL DEFAULT '*',`store1` VARCHAR(60) NOT NULL DEFAULT '*',`store2` VARCHAR(60) NOT NULL DEFAULT '*',`date` DATE NOT NULL DEFAULT '2020-08-25',`customer` VARCHAR(60) NOT NULL DEFAULT '*',`product` VARCHAR(60) NOT NULL DEFAULT '*',`quantity` VARCHAR(60) NOT NULL DEFAULT '0',`payment` VARCHAR(60) NOT NULL DEFAULT '0.0',`advance` VARCHAR(60) NOT NULL DEFAULT '0.0',`creditused` VARCHAR(60) NOT NULL DEFAULT '0.0',PRIMARY KEY (`code`),UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE);";
            String update10 = "CREATE TABLE IF NOT EXISTS `200130586_ipc2_proyecto1`.`sale` (`code` VARCHAR(60) NOT NULL DEFAULT '*',`store` VARCHAR(60) NOT NULL DEFAULT '*',`date` DATE NOT NULL DEFAULT '2020-08-25',`customer` VARCHAR(60) NOT NULL DEFAULT '*',`product` VARCHAR(60) NOT NULL DEFAULT '*',`quantity` VARCHAR(60) NOT NULL DEFAULT '0',`payment` VARCHAR(60) NOT NULL DEFAULT '0.0',`creditused` VARCHAR(60) NOT NULL DEFAULT '0.0',PRIMARY KEY (`code`),UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE);";
            String update11 = "CREATE TABLE IF NOT EXISTS `200130586_ipc2_proyecto1`.`delivery` (`code` VARCHAR(60) NOT NULL DEFAULT '*',`store1` VARCHAR(60) NOT NULL DEFAULT '*',`store2` VARCHAR(60) NOT NULL DEFAULT '*',`date` DATE NOT NULL DEFAULT '2020-08-25',`customer` VARCHAR(60) NOT NULL DEFAULT '*',`product` VARCHAR(60) NOT NULL DEFAULT '*',`quantity` VARCHAR(60) NOT NULL DEFAULT '0',`advance` VARCHAR(60) NOT NULL DEFAULT '0.0',`payment` VARCHAR(60) NOT NULL DEFAULT '0.0',`creditused` VARCHAR(60) NOT NULL DEFAULT '0.0',PRIMARY KEY (`code`),UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE);";
            String update12 = "CREATE TABLE IF NOT EXISTS `200130586_ipc2_proyecto1`.`sold` (`code` VARCHAR(60) NOT NULL DEFAULT '*',`product` VARCHAR(60) NOT NULL DEFAULT '*',`store` VARCHAR(60) NOT NULL DEFAULT '*',`quantity` VARCHAR(60) NOT NULL DEFAULT '0',PRIMARY KEY (`code`));";
            
            PreparedStatement ps = connection.prepareStatement(update1);
            ps.executeUpdate();
            ps = connection.prepareStatement(update2);
            ps.executeUpdate();
            ps = connection.prepareStatement(update3);
            ps.executeUpdate();
            ps = connection.prepareStatement(update4);
            ps.executeUpdate();
            ps = connection.prepareStatement(update5);
            ps.executeUpdate();
            ps = connection.prepareStatement(update6);
            ps.executeUpdate();
            ps = connection.prepareStatement(update7);
            ps.executeUpdate();
            ps = connection.prepareStatement(update8);
            ps.executeUpdate();
            ps = connection.prepareStatement(update9);
            ps.executeUpdate();
            ps = connection.prepareStatement(update10);
            ps.executeUpdate();
            ps = connection.prepareStatement(update11);
            ps.executeUpdate();
            ps = connection.prepareStatement(update12);
            ps.executeUpdate();
            
            //******************************
            //******************************
            // This fills the ComboBoxes
            fillComboBoxes();
            //******************************
            //******************************            

            jTextAreaInfo.append("\nCONEXIÓN ESTABLECIDA CON LA BASE DE DATOS");
            System.out.println("DATABASE CREATED");
            
            ps.close();
        }
        catch (Exception e){
            System.err.println("Exception!");
            System.err.println(e.getMessage());
            jTextAreaInfo.append("\nPor favor ingrese correctamente la información del servidor");
        }
    }//GEN-LAST:event_jButtonInfoConnectMouseClicked

    /***
     * To export the report to an HTML file, readable by any web browser
     * @param evt 
     */
    
    private void jButtonInfoExportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInfoExportMouseClicked
        exportHTML();
    }//GEN-LAST:event_jButtonInfoExportMouseClicked

    /***
     * To import data to MySQL database
     * @param evt 
     */
    
    private void jButtonInfoImportDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInfoImportDataMouseClicked

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Expecifique el archivo por abrir");
        // If the main directory is the user
        //fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        // if the main directory is the file address
        fileChooser.setCurrentDirectory(new File("."));
        // filsters the extension of the file
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text File","txt");
        fileChooser.setFileFilter(filter);
        
        jTextAreaInfo.setText("");
        jTextAreaInfo.append("\nImportando datos desde el archivo, por favor espere un momento");       
        
        int approve = fileChooser.showOpenDialog(null);
        if (approve == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());

            // Loading the file
            loadFile(selectedFile.getAbsolutePath());
            
            printOnScreenInfo("DATOS IMPORTADOS DESDE UN ARCHIVO",true, true, true, true, true, true, false, false, false, false);
            
            //******************************
            //******************************
            // This fills the ComboBoxes
            fillComboBoxes();
            //******************************
            //******************************              
            
        }
        else {
            jTextAreaInfo.append("\nNo hay un archivo que abrir, por favor intente abrir de nuevo un archivo válido");
            System.out.println("No hay un archivo que abrir, por favor intente abrir de nuevo un archivo válido");
        }
    }//GEN-LAST:event_jButtonInfoImportDataMouseClicked

    /***
     * To insert information about the new employee
     * @param evt 
     */
    
    private void jButtonEmployeesIntroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEmployeesIntroMouseClicked
        //To upload data to the table
        if ( !( jTextFieldEmployeesName.getText().equals("") || jTextFieldEmployeesPhone.getText().equals("") || jTextFieldEmployeesCode.getText().equals("") || jTextFieldEmployeesDPI.getText().equals("") ) ) {
        
            jLabelEmployeesMessage.setText("Introduciendo empleado");
            System.out.println("Introduciendo empleado");
            try {              
                PreparedStatement ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`employee` (`name`,`phone`,`code`,`DPI`) VALUES (?,?,?,?);");
                ps.setString(1, jTextFieldEmployeesName.getText());
                ps.setString(2, jTextFieldEmployeesPhone.getText());
                ps.setString(3, jTextFieldEmployeesCode.getText());
                ps.setString(4, jTextFieldEmployeesDPI.getText());
                
                ps.executeUpdate();
                
                jLabelEmployeesMessage.setText(jTextFieldEmployeesCode.getText() + " introducido con éxito");
                System.out.println(jTextFieldEmployeesCode.getText() + " introducido con éxito"); 
                
                ps.close(); 
            }
            catch (Exception e){
                jLabelEmployeesMessage.setText("No se pudo introducir el empleado");
                System.out.println("No se pudo introducir el empleado");            
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            } 
        }
        else {
            jLabelEmployeesMessage.setText("Por favor introduzca los campos obligatorios");
            System.out.println("Por favor introduzca los campos obligatorios");
        }
    }//GEN-LAST:event_jButtonEmployeesIntroMouseClicked

    /***
     * To insert data about the new time between stores
     * @param evt 
     */
    
    private void jButtonTimeIntroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonTimeIntroMouseClicked
        //To upload data to the table
        if ( !( jComboBoxTimeStore1.getSelectedItem().toString().equals("") || jComboBoxTimeStore2.getSelectedItem().toString().equals("") || jTextFieldTimeTime.getText().equals("") ) ) {
        
            jLabelTimeMessage.setText("Introduciendo tiempo");
            System.out.println("Introduciendo tiempo");
            try {              
                PreparedStatement ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`time` (`code`,`store1`,`store2`,`time`) VALUES (?,?,?,?);");
                ps.setString(1, jComboBoxTimeStore1.getSelectedItem().toString() + jComboBoxTimeStore2.getSelectedItem().toString());
                ps.setString(2, jComboBoxTimeStore1.getSelectedItem().toString());
                ps.setString(3, jComboBoxTimeStore2.getSelectedItem().toString());
                ps.setString(4, jTextFieldTimeTime.getText());
                
                ps.executeUpdate();
                
                // We make a second statement that reverses the information so that it exists in both ways
                ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`time` (`code`,`store1`,`store2`,`time`) VALUES (?,?,?,?);");
                ps.setString(1, jComboBoxTimeStore2.getSelectedItem().toString() + jComboBoxTimeStore1.getSelectedItem().toString());
                ps.setString(2, jComboBoxTimeStore2.getSelectedItem().toString());
                ps.setString(3, jComboBoxTimeStore1.getSelectedItem().toString());
                ps.setString(4, jTextFieldTimeTime.getText());
                
                ps.executeUpdate();
                
                // Finally
                jLabelTimeMessage.setText(jComboBoxTimeStore1.getSelectedItem().toString() + jComboBoxTimeStore2.getSelectedItem().toString() + " introducido con éxito");
                System.out.println(jComboBoxTimeStore1.getSelectedItem().toString() + jComboBoxTimeStore2.getSelectedItem().toString() + " introducido con éxito"); 
                
                ps.close(); 
            }
            catch (Exception e){
                jLabelTimeMessage.setText("No se pudo introducir el tiempo");
                System.out.println("No se pudo introducir el tiempo");            
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            } 
        }
        else {
            jLabelTimeMessage.setText("Por favor introduzca los campos obligatorios");
            System.out.println("Por favor introduzca los campos obligatorios");
        }
    }//GEN-LAST:event_jButtonTimeIntroMouseClicked

    /***
     * To insert data about the new product
     * @param evt 
     */
    
    private void jButtonProductsIntroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonProductsIntroMouseClicked
        //To upload data to the table
        if ( !( jTextFieldProductsName.getText().equals("") || jTextFieldProductsMaker.getText().equals("") || jTextFieldProductsCode.getText().equals("") || jTextFieldProductsQuantity.getText().equals("") || jTextFieldProductsPrice.getText().equals("") || jComboBoxProductsStore.getSelectedItem().toString().equals("") ) ) {
        
            jLabelProductsMessage.setText("Introduciendo producto");
            System.out.println("Introduciendo producto");
            try {       
                // Introduces products available
                PreparedStatement ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`product` (`name`,`maker`,`code`,`quantity`,`price`,`store`,`description`,`warranty`) VALUES (?,?,?,?,?,?,?,?);");
                ps.setString(1, jTextFieldProductsName.getText());
                ps.setString(2, jTextFieldProductsMaker.getText());
                ps.setString(3, jTextFieldProductsCode.getText());
                ps.setString(4, jTextFieldProductsQuantity.getText());
                ps.setString(5, jTextFieldProductsPrice.getText());
                ps.setString(6, jComboBoxProductsStore.getSelectedItem().toString());
                ps.setString(7, jTextFieldProductsDescription.getText());
                ps.setString(8, jTextFieldProductsWarranty.getText());
                
                ps.executeUpdate();
                
                // Introduces products sold with 0 quantity
                ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`sold` (`code`,`product`,`store`,`quantity`) VALUES (?,?,?,'0');");
                ps.setString(1, jTextFieldProductsCode.getText() + jComboBoxProductsStore.getSelectedItem().toString());
                ps.setString(2, jTextFieldProductsCode.getText());
                ps.setString(3, jComboBoxProductsStore.getSelectedItem().toString());
                
                ps.executeUpdate();
                
                // Finally
                jLabelProductsMessage.setText(jTextFieldProductsCode.getText() + " introducido con éxito");
                System.out.println(jTextFieldProductsCode.getText() + " introducido con éxito");
                
                //***********************
                // To fill the products in the comboboxes                       
                ResultSet rs = ps.executeQuery("SELECT `code` FROM `200130586_ipc2_proyecto1`.`product` WHERE `store`='" + jComboBoxOrdersStore1.getSelectedItem().toString() + "' ORDER BY `code`;");
                jComboBoxOrdersProduct.removeAllItems();
                while (rs.next()) {
                    jComboBoxOrdersProduct.addItem(rs.getString("code"));
                }

                rs = ps.executeQuery("SELECT `code` FROM `200130586_ipc2_proyecto1`.`product` WHERE `store`='" + jComboBoxSalesStore.getSelectedItem().toString() + "' ORDER BY `code`;");
                jComboBoxSalesProduct.removeAllItems();
                while (rs.next()) {
                    jComboBoxSalesProduct.addItem(rs.getString("code"));
                }           

                //***********************


                ps.close();
            }
            catch (Exception e){
                jLabelProductsMessage.setText("No se pudo introducir el producto");
                System.out.println("No se pudo introducir el producto");            
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            } 
        }
        else {
            jLabelProductsMessage.setText("Por favor introduzca los campos obligatorios");
            System.out.println("Por favor introduzca los campos obligatorios");
        }
    }//GEN-LAST:event_jButtonProductsIntroMouseClicked

    /***
     * To insert data about the new customer
     * @param evt 
     */
    
    private void jButtonCustomersIntroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCustomersIntroMouseClicked
        //To upload data to the table
        if ( !( jTextFieldCustomersName.getText().equals("") || jTextFieldCustomersPhone.getText().equals("") || jTextFieldCustomersNIT.getText().equals("") ) ) {
        
            jLabelCustomersMessage.setText("Introduciendo cliente");
            System.out.println("Introduciendo cliente");
            try {              
                PreparedStatement ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`customer` (`name`,`phone`,`NIT`,`DPI`,`credit`,`email`,`address`) VALUES (?,?,?,?,?,?,?);");
                ps.setString(1, jTextFieldCustomersName.getText());
                ps.setString(2, jTextFieldCustomersPhone.getText());
                ps.setString(3, jTextFieldCustomersNIT.getText());
                ps.setString(4, jTextFieldCustomersDPI.getText());
                ps.setString(5, jTextFieldCustomersCredit.getText());
                ps.setString(6, jTextFieldCustomersEmail.getText());
                ps.setString(7, jTextFieldCustomersAddress.getText());
                
                ps.executeUpdate();
                
                // Finally
                jLabelCustomersMessage.setText(jTextFieldCustomersNIT.getText() + " introducido con éxito");
                System.out.println(jTextFieldCustomersNIT.getText() + " introducido con éxito");
                
                //***********************

                // Customer's NIT
                ResultSet rs = ps.executeQuery("SELECT `NIT` FROM `200130586_ipc2_proyecto1`.`customer` ORDER BY `NIT`;");
                jComboBoxInfoBuyingsCustomer.removeAllItems();
                jComboBoxInfoOrdersCustomer.removeAllItems();
                jComboBoxOrdersCustomer.removeAllItems();
                jComboBoxSalesCustomer.removeAllItems();
                while (rs.next()) {
                    jComboBoxInfoBuyingsCustomer.addItem(rs.getString("NIT"));
                    jComboBoxInfoOrdersCustomer.addItem(rs.getString("NIT"));
                    jComboBoxOrdersCustomer.addItem(rs.getString("NIT"));
                    jComboBoxSalesCustomer.addItem(rs.getString("NIT"));
                }  
                
                //***********************
                
                ps.close(); 
            }
            catch (Exception e){
                jLabelCustomersMessage.setText("No se pudo introducir el cliente");
                System.out.println("No se pudo introducir el cliente");            
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            } 
        }
        else {
            jLabelCustomersMessage.setText("Por favor introduzca los campos obligatorios");
            System.out.println("Por favor introduzca los campos obligatorios");
        }
    }//GEN-LAST:event_jButtonCustomersIntroMouseClicked

    /***
     * To insert data about the new order from the customer
     * @param evt 
     */
    
    private void jButtonOrdersIntroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOrdersIntroMouseClicked
        //To upload data to the table
        if ( !( jComboBoxOrdersCustomer.getSelectedItem().toString().equals("") || jTextFieldOrdersQuantity.getText().equals("") || jTextFieldOrdersAdvance.getText().equals("") ) ) {
        
            jLabelOrdersMessage.setText("Introduciendo pedido");
            System.out.println("Introduciendo pedido");
            try {              
                // To generate the order's code an unique identifier
                String orderCode = jComboBoxOrdersCustomer.getSelectedItem().toString() + "_" + jComboBoxOrdersProduct.getSelectedItem().toString() + "_" + jComboBoxOrdersStore1.getSelectedItem().toString() + "_" + jComboBoxOrdersDate3.getSelectedItem().toString() + "-" + jComboBoxOrdersDate2.getSelectedItem().toString() + "-" + jComboBoxOrdersDate1.getSelectedItem().toString();                
                
                //  To process the paymnet, to print the advance payment 25%
                double productPrice = Double.parseDouble(jLabelOrdersPriceNumber.getText());
                double totalPayment = Double.parseDouble(jLabelOrdersPaymentTotalNumber.getText());
                double advance = Double.parseDouble(jTextFieldOrdersAdvance.getText());
                double creditTyped = Double.parseDouble(jTextFieldOrdersCustomerCredit.getText());
                double partialPayment = totalPayment - advance - creditTyped;
                
                String customerCredit = "0.0";
                
                PreparedStatement ps = connection.prepareStatement("USE `200130586_ipc2_proyecto1`;");
                
                ResultSet rs = ps.executeQuery("SELECT `credit` FROM `200130586_ipc2_proyecto1`.`customer` WHERE `NIT` = '" + jComboBoxOrdersCustomer.getSelectedItem().toString() + "';");
                while (rs.next()) {
                    customerCredit = rs.getString("credit");
                } 
                
                // Updates the customer's credit, if payment is 100% credit bonus is 5%, if not then 2%
                Double bonusCredit = 0.0;
                if ( advance == totalPayment ) {
                    bonusCredit = totalPayment * 0.05;
                }
                else {
                    bonusCredit = totalPayment * 0.02;
                }
                jLabelOrdersNewCreditNumber.setText(String.valueOf(bonusCredit));
                
                Double newCustomerCredit = Double.parseDouble(customerCredit) - creditTyped + bonusCredit;
                
                // Updates the credit
                ps = connection.prepareStatement("UPDATE `200130586_ipc2_proyecto1`.`customer` SET `credit` = ? WHERE `NIT` = ?;");
                ps.setString(1, String.valueOf(newCustomerCredit));
                ps.setString(2, jComboBoxOrdersCustomer.getSelectedItem().toString());
                
                ps.executeUpdate();                
                
                // Main command
                ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`order` (`code`,`store1`,`store2`,`date`,`customer`,`product`,`quantity`,`payment`,`advance`, `creditused`) VALUES (?,?,?,?,?,?,?,?,?,?);");
                ps.setString(1, orderCode);
                ps.setString(2, jComboBoxOrdersStore1.getSelectedItem().toString());
                ps.setString(3, jComboBoxOrdersStore2.getSelectedItem().toString());
                ps.setString(4, jComboBoxOrdersDate3.getSelectedItem().toString() + "-" + jComboBoxOrdersDate2.getSelectedItem().toString() + "-" + jComboBoxOrdersDate1.getSelectedItem().toString());
                ps.setString(5, jComboBoxOrdersCustomer.getSelectedItem().toString());
                ps.setString(6, jComboBoxOrdersProduct.getSelectedItem().toString());
                ps.setString(7, jTextFieldOrdersQuantity.getText());
                ps.setString(8, String.valueOf(partialPayment));
                ps.setString(9, jTextFieldOrdersAdvance.getText());
                ps.setString(10, String.valueOf(creditTyped));
                
                ps.executeUpdate();
                
                // Finally
                jLabelOrdersMessage.setText(orderCode + " introducido con éxito");
                System.out.println(orderCode + " introducido con éxito");
                
                //*************************
                // This updates when an Order is received in 'OrdersReceived'            
                rs = ps.executeQuery("SELECT `code` FROM `200130586_ipc2_proyecto1`.`order` ORDER BY `code`;");
                jComboBoxOrdersReceivedCode.removeAllItems();
                while (rs.next()) {
                    jComboBoxOrdersReceivedCode.addItem(rs.getString("code"));
                }
                
                /*rs = st.executeQuery("SELECT * FROM `200130586_ipc2_proyecto1`.`order` WHERE `code` = '" + orderCode + "';");
                while (rs.next()) {
                    jLabelOrdersReceivedStore1Message.setText(rs.getString("store1"));
                    jLabelOrdersReceivedStore2Message.setText(rs.getString("store2"));
                    jLabelOrdersReceivedDateMessage.setText(rs.getString("date"));
                    jLabelOrdersReceivedCustomerMessage.setText(rs.getString("customer"));
                    jLabelOrdersReceivedProductMessage.setText(rs.getString("product"));
                    jLabelOrdersReceivedQuantityMessage.setText(rs.getString("quantity"));
                    jLabelOrdersReceivedPaymentMessage.setText(rs.getString("payment"));
                    jLabelOrdersReceivedAdvancetMessage.setText(rs.getString("advance"));
                } 
                */
                //***********************           
                
                ps.close();
            }
            catch (Exception e){
                jLabelOrdersMessage.setText("No se pudo introducir el pedido");
                System.out.println("No se pudo introducir el pedido");            
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            } 
        }
        else {
            jLabelOrdersMessage.setText("Por favor introduzca los campos obligatorios");
            System.out.println("Por favor introduzca los campos obligatorios");
        }
    }//GEN-LAST:event_jButtonOrdersIntroMouseClicked

    /***
     * To update information in the combobox
     * @param evt 
     */
    
    private void jComboBoxOrdersProductMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxOrdersProductMouseEntered
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT `code` FROM `200130586_ipc2_proyecto1`.`product` WHERE `store`= ? ORDER BY `code`;");
            ps.setString(1, jComboBoxOrdersStore1.getSelectedItem().toString());
            
            // To fill the products in the comboboxes

            ResultSet rs = ps.executeQuery();

            jComboBoxOrdersProduct.removeAllItems();
            while (rs.next()) {
                jComboBoxOrdersProduct.addItem(rs.getString("code"));
            }           

            ps.close();
        }
        catch (Exception e){           
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jComboBoxOrdersProductMouseEntered

    /***
     * To update information in the combobox
     * @param evt 
     */
    
    private void jComboBoxSalesProductMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxSalesProductMouseEntered
        try {              
            // To fill the products in the comboboxes
            PreparedStatement ps = connection.prepareStatement("SELECT `code` FROM `200130586_ipc2_proyecto1`.`product` WHERE `store`= ? ORDER BY `code`;");
            ps.setString(1, jComboBoxSalesStore.getSelectedItem().toString());

            ResultSet rs = ps.executeQuery();

            jComboBoxSalesProduct.removeAllItems();
            while (rs.next()) {
                jComboBoxSalesProduct.addItem(rs.getString("code"));
            } 
            
            rs.close();
            
            // To print the quantity
            ps = connection.prepareStatement("SELECT `quantity` FROM `200130586_ipc2_proyecto1`.`product` WHERE `code` = ?;");
            ps.setString(1, jComboBoxSalesProduct.getSelectedItem().toString());
            
            rs = ps.executeQuery();
            while (rs.next()) {
                jLabelSalesQuantityAvailableNumber.setText(rs.getString("quantity"));
            } 
            
            rs.close();
            
            // To show the credit of the customer
            ps = connection.prepareStatement("SELECT `credit` FROM `200130586_ipc2_proyecto1`.`customer` WHERE `NIT`= ?;");
            ps.setString(1, jComboBoxSalesCustomer.getSelectedItem().toString());
            
            rs = ps.executeQuery();
            while (rs.next()) {
                jLabelSalesCreditAvailableNumber.setText(rs.getString("credit"));
            }             
            
            rs.close();
            ps.close();
        }
        catch (Exception e){           
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jComboBoxSalesProductMouseEntered

    /***
     * To insert data about the orders received in actual store
     * @param evt 
     */
    
    private void jButtonOrdersReceivedIntroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOrdersReceivedIntroMouseClicked
        //To upload data to the table
        
        jLabelOrdersReceivedMessage.setText("Introduciendo pedido recibido");
        System.out.println("Introduciendo pedido recibido");
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`order` WHERE `code` = ?;");
            ps.setString(1, jComboBoxOrdersReceivedCode.getSelectedItem().toString());

            ResultSet rs = ps.executeQuery(); 

            String code = "";
            String store1 = "";
            String store2 = "";
            String date = "";
            String customer = "";
            String product = "";
            String quantity = "";
            String payment = "";
            String advance = "";
            String creditUsed = "";

            while (rs.next()) {
                code = rs.getString("code");
                store1 = rs.getString("store1");
                store2 = rs.getString("store2");
                date = rs.getString("date");
                customer = rs.getString("customer");
                product = rs.getString("product");
                quantity = rs.getString("quantity");
                payment = rs.getString("payment");
                advance = rs.getString("advance");
                creditUsed = rs.getString("creditused");
                
                jLabelOrdersReceivedDateMessage.setText(date);
            }
            
            rs.close();

            // We introduce the order received
            ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`orderreceived` (`code`,`store1`,`store2`,`date`,`customer`,`product`,`quantity`,`payment`,`advance`,`creditused`) VALUES (?,?,?,?,?,?,?,?,?,?);");
            ps.setString(1, code);     
            ps.setString(2, store1);     
            ps.setString(3, store2);
            ps.setString(4, jComboBoxOrdersReceivedDateArraived3.getSelectedItem().toString() + "-" + jComboBoxOrdersReceivedDateArraived2.getSelectedItem().toString() + "-" + jComboBoxOrdersReceivedDateArraived1.getSelectedItem().toString());
            ps.setString(5, customer);
            ps.setString(6, product);
            ps.setString(7, quantity);
            ps.setString(8, payment);
            ps.setString(9, advance);
            ps.setString(10, creditUsed);
            
            ps.executeUpdate();
            
            // We delete the order given
            ps = connection.prepareStatement("DELETE FROM `200130586_ipc2_proyecto1`.`order` WHERE `code` = ?;");
            ps.setString(1, jComboBoxOrdersReceivedCode.getSelectedItem().toString());
            
            ps.executeUpdate();
            
            // Finally
            jLabelOrdersReceivedMessage.setText(jComboBoxOrdersReceivedCode.getSelectedItem().toString() + " introducido con éxito");
            System.out.println(jComboBoxOrdersReceivedCode.getSelectedItem().toString() + " introducido con éxito");
            
            //*************************
            // This updates when an Order is received  
            ps = connection.prepareStatement("SELECT `code` FROM `200130586_ipc2_proyecto1`.`order` ORDER BY `code`;");
            
            rs = ps.executeQuery();
            jComboBoxOrdersReceivedCode.removeAllItems();
            while (rs.next()) {
                jComboBoxOrdersReceivedCode.addItem(rs.getString("code"));
            }
            
            rs.close();
            
            // Fills the labels
            ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`order` WHERE `code` = ?;");
            ps.setString(1, jComboBoxOrdersReceivedCode.getSelectedItem().toString());

            rs = ps.executeQuery();
            while (rs.next()) {
                jLabelOrdersReceivedStore1Message.setText(rs.getString("store1"));
                jLabelOrdersReceivedStore2Message.setText(rs.getString("store2"));
                jLabelOrdersReceivedDateMessage.setText(rs.getString("date"));
                jLabelOrdersReceivedCustomerMessage.setText(rs.getString("customer"));
                jLabelOrdersReceivedProductMessage.setText(rs.getString("product"));
                jLabelOrdersReceivedQuantityNumber.setText(rs.getString("quantity"));
                jLabelOrdersReceivedPaymentNumber.setText(rs.getString("payment"));
                jLabelOrdersReceivedAdvanceNumber.setText(rs.getString("advance"));
                jLabelOrdersReceivedCreditUsedNumber.setText(rs.getString("creditused"));
            } 
            //***********************              

            ps.close();
        }
        catch (Exception e){
            jLabelOrdersReceivedMessage.setText("No se pudo introducir el pedido recibido");
            System.out.println("No se pudo introducir el pedido recibido");            
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        } 
    }//GEN-LAST:event_jButtonOrdersReceivedIntroMouseClicked

    /***
     * To insert data about the new sale
     * @param evt 
     */
    
    private void jButtonSalesIntroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSalesIntroMouseClicked
        //To upload data to the table
        if ( !( jComboBoxSalesCustomer.getSelectedItem().toString().equals("") || jTextFieldSalesQuantity.getText().equals("") || jLabelSalesPaymentNumber.getText().equals("") ) ) {
        
            jLabelSalesMessage.setText("Introduciendo venta");
            System.out.println("Introduciendo venta");
            try {      
                // To generate the sale's code,  an unique identifier
                String salesCode = jComboBoxSalesCustomer.getSelectedItem().toString() + "_" + jComboBoxSalesProduct.getSelectedItem().toString() + "_" + jComboBoxSalesStore.getSelectedItem().toString() + "_" + jComboBoxSalesDate3.getSelectedItem().toString() + "-" + jComboBoxSalesDate2.getSelectedItem().toString() + "-" + jComboBoxSalesDate1.getSelectedItem().toString();
                
                // To use quantity as an acceptable integer
                int quantityAvailable = Integer.parseInt(jLabelSalesQuantityAvailableNumber.getText());
                int quantityIntroduced = Integer.parseInt(jTextFieldSalesQuantity.getText());
                int quantity = 0;
                
                if ( quantityIntroduced > quantityAvailable ) {
                    quantity = quantityAvailable;
                }
                else if ( quantityIntroduced < 0 ) {
                    quantity = 0;
                }
                else {
                    quantity = quantityIntroduced;
                }   
                
                // To use customer credit
                double availableCredit = Double.parseDouble(jLabelSalesCreditAvailableNumber.getText());
                double paymentCredit = Double.parseDouble(jTextFieldSalesCredit.getText());
                double credit = 0.0;
                
                if ( paymentCredit > availableCredit ) {
                    credit = availableCredit;
                }
                else if ( paymentCredit < 0.0 ) {
                    credit = 0.0;
                }                
                else {
                    credit = paymentCredit;
                }                   
                
                // The total payment is payment - credit
                double payment = Double.parseDouble(jLabelSalesPaymentNumber.getText());
                double totalPayment = 0.0;
                
                if ( credit > payment ) {
                    totalPayment = 0.0;
                    credit = payment;
                }                  
                else {
                    totalPayment = payment - credit;
                }
                
                PreparedStatement ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`sale` (`code`,`store`,`date`,`customer`,`product`,`quantity`,`payment`,`creditused`) VALUES (?,?,?,?,?,?,?,?);");
                ps.setString(1, salesCode);
                ps.setString(2, jComboBoxSalesStore.getSelectedItem().toString());
                ps.setString(3, jComboBoxSalesDate3.getSelectedItem().toString() + "-" + jComboBoxSalesDate2.getSelectedItem().toString() + "-" + jComboBoxSalesDate1.getSelectedItem().toString());
                ps.setString(4, jComboBoxSalesCustomer.getSelectedItem().toString());
                ps.setString(5, jComboBoxSalesProduct.getSelectedItem().toString());
                ps.setString(6, String.valueOf(quantity));
                ps.setString(7, String.valueOf(totalPayment));
                ps.setString(8, String.valueOf(credit));
                
                ps.executeUpdate();
                         
                // Updates the credit
                Double newCustomerCredit = Double.parseDouble(jLabelSalesCreditAvailableNumber.getText()) - credit; 
                ps = connection.prepareStatement("UPDATE `200130586_ipc2_proyecto1`.`customer` SET `credit` = ? WHERE `NIT` = ?;");
                ps.setString(1, String.valueOf(newCustomerCredit));
                ps.setString(2, jComboBoxSalesCustomer.getSelectedItem().toString());
                                
                ps.executeUpdate();
                jLabelSalesCreditAvailableNumber.setText(String.valueOf(newCustomerCredit));
                
                // Updates the quantity of products in store
                int productNewQuantity = quantityAvailable - quantity;
                ps = connection.prepareStatement("UPDATE `200130586_ipc2_proyecto1`.`product` SET `quantity` = ? WHERE `code` = ? AND `store` = ?;");
                ps.setString(1, String.valueOf(productNewQuantity));
                ps.setString(2, jComboBoxSalesProduct.getSelectedItem().toString());
                ps.setString(3, jComboBoxSalesStore.getSelectedItem().toString());
                
                ps.executeUpdate();
                
                // Updates quantity in sold products
                int quantitySold = quantity;
                ps = connection.prepareStatement("SELECT `quantity` FROM `200130586_ipc2_proyecto1`.`sold` WHERE `product` = ? AND `store` = ?;");
                ps.setString(1, jComboBoxSalesProduct.getSelectedItem().toString());
                ps.setString(2, jComboBoxSalesStore.getSelectedItem().toString());
                
                ResultSet rs = ps.executeQuery();
                while ( rs.next() ) {
                    quantitySold += Integer.parseInt(rs.getString("quantity"));
                }
                ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`sold` (`code`,`product`,`store`,`quantity`) VALUES (?,?,?,?);");
                ps.setString(1, jComboBoxSalesProduct.getSelectedItem().toString() + jComboBoxSalesStore.getSelectedItem().toString());
                ps.setString(2, jComboBoxSalesProduct.getSelectedItem().toString());
                ps.setString(3, jComboBoxSalesStore.getSelectedItem().toString());
                ps.setString(4, String.valueOf(quantitySold));
                
                ps.executeUpdate();
                
                // Finally
                jLabelSalesMessage.setText(salesCode + " introducido con éxito");
                System.out.println(salesCode + " introducido con éxito");
                
                ps.close();
            }
            catch (Exception e){
                jLabelSalesMessage.setText("No se pudo introducir la venta");
                System.out.println("No se pudo introducir la venta");            
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            } 
        }
        else {
            jLabelSalesMessage.setText("Por favor introduzca los campos obligatorios");
            System.out.println("Por favor introduzca los campos obligatorios");
        }
    }//GEN-LAST:event_jButtonSalesIntroMouseClicked

    /***
     * To see the orders in process
     * @param evt 
     */
    
    private void jButtonInfoOrdersInProcessMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInfoOrdersInProcessMouseClicked
        // We clear the arrays    
        clearDatabaseArrays();  
        
        try {
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`order` ORDER BY `code`;");
            
            // Set of data
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Order order = new Order();
                
                String code = rs.getString("code");    
                String store1 = rs.getString("store1");
                String store2 = rs.getString("store2");
                String date = rs.getString("date");
                String customer = rs.getString("customer");
                String product = rs.getString("product");
                String quantity = rs.getString("quantity");
                String payment = rs.getString("payment");
                String advance = rs.getString("advance");
                String creditUsed = rs.getString("creditused");
                
                order.code = code;
                order.store1 = store1;
                order.store2 = store2;
                order.date = date;
                order.customer = customer;
                order.product = product;
                order.quantity = quantity;
                order.payment = payment;
                order.advance = advance;
                order.creditUsed = creditUsed;
                
                orders.add(order);
                
                order = null;

                // print the results
                System.out.format("%s, %s, %s, %s, %s, %s, %s, %s, %s, %s\n", code, store1, store2, date, customer, product, quantity, payment, advance, creditUsed);
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenInfo("PEDIDOS EN PROCESO",false, false, false, false, false, true, false, false, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonInfoOrdersInProcessMouseClicked

    /***
     * To see the orders received
     * @param evt 
     */
    
    private void jButtonInfoOrdersReceivedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInfoOrdersReceivedMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();           
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`orderreceived` ORDER BY `code`;");

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                OrderReceived orderReceived = new OrderReceived();
                
                String code = rs.getString("code");    
                String store1 = rs.getString("store1");
                String store2 = rs.getString("store2");
                String date = rs.getString("date");
                String customer = rs.getString("customer");
                String product = rs.getString("product");
                String quantity = rs.getString("quantity");
                String payment = rs.getString("payment");
                String advance = rs.getString("advance");
                String creditUsed = rs.getString("creditused");
                
                orderReceived.code = code;
                orderReceived.store1 = store1;
                orderReceived.store2 = store2;
                orderReceived.date = date;
                orderReceived.customer = customer;
                orderReceived.product = product;
                orderReceived.quantity = quantity;
                orderReceived.payment = payment;
                orderReceived.advance = advance;
                orderReceived.creditUsed = creditUsed;
                
                ordersReceived.add(orderReceived);
                
                orderReceived = null;

                // print the results
                System.out.format("%s, %s, %s, %s, %s, %s, %s, %s, %s, %s\n", code, store1, store2, date, customer, product, quantity, payment, advance, creditUsed);
            }
            
            ps.close();
            
            // Prints orders we have received
            printOnScreenInfo("PEDIDOS RECIBIDOS", false, false, false, false, false, false, true, false, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonInfoOrdersReceivedMouseClicked

    /***
     * To see the buyings from a customer
     * @param evt 
     */
    
    private void jButtonInfoBuyingsCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInfoBuyingsCustomerMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();           
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`sale` WHERE `sale`.`customer` = ? ORDER BY `code`;");
            ps.setString(1, jComboBoxInfoBuyingsCustomer.getSelectedItem().toString());

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Sale saleCustomer = new Sale();
                
                String code = rs.getString("code");    
                String store = rs.getString("store");
                String date = rs.getString("date");
                String customer = rs.getString("customer");
                String product = rs.getString("product");
                String quantity = rs.getString("quantity");
                String payment = rs.getString("payment");
                String creditUsed = rs.getString("creditused");
                
                saleCustomer.code = code;
                saleCustomer.store = store;
                saleCustomer.date = date;
                saleCustomer.customer = customer;
                saleCustomer.product = product;
                saleCustomer.quantity = quantity;
                saleCustomer.payment = payment;
                saleCustomer.creditUsed = creditUsed;
                
                sales.add(saleCustomer);
                
                saleCustomer = null;

                // print the results
                System.out.format("%s, %s, %s, %s, %s, %s, %s, %s\n", code, store, date, customer, product, quantity, payment, creditUsed);
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenInfo("COMPRAS POR CLIENTE", false, false, false, false, false, false, false, true, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonInfoBuyingsCustomerMouseClicked

    /***
     *  To update information in the combobox
     * @param evt 
     */
    
    private void jComboBoxOrdersReceivedCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxOrdersReceivedCodeItemStateChanged
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`order` WHERE `code` = ?;");
            ps.setString(1, jComboBoxOrdersReceivedCode.getSelectedItem().toString());

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                jLabelOrdersReceivedStore1Message.setText(rs.getString("store1"));
                jLabelOrdersReceivedStore2Message.setText(rs.getString("store2"));
                jLabelOrdersReceivedDateMessage.setText(rs.getString("date"));
                jLabelOrdersReceivedCustomerMessage.setText(rs.getString("customer"));
                jLabelOrdersReceivedProductMessage.setText(rs.getString("product"));
                jLabelOrdersReceivedQuantityNumber.setText(rs.getString("quantity"));
                jLabelOrdersReceivedPaymentNumber.setText(rs.getString("payment"));
                jLabelOrdersReceivedAdvanceNumber.setText(rs.getString("advance"));
                jLabelOrdersReceivedCreditUsedNumber.setText(rs.getString("creditused"));
            } 

            //***********************                

            ps.close();
        }
        catch (Exception e){       
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        } 
    }//GEN-LAST:event_jComboBoxOrdersReceivedCodeItemStateChanged

    /***
     * To update information in the combobox
     * @param evt 
     */
    
    private void jComboBoxOrdersReceivedCodeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxOrdersReceivedCodeMouseEntered
        try {
            // TO fill the code combobox
            PreparedStatement ps = connection.prepareStatement("SELECT `code` FROM `200130586_ipc2_proyecto1`.`order`;");
            
            ResultSet rs = ps.executeQuery();
            jComboBoxOrdersReceivedCode.removeAllItems();
            while (rs.next()) {
                jComboBoxOrdersReceivedCode.addItem(rs.getString("code"));
            }            
            
            rs.close();
            
            // To fill the information in the labels
            ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`order` WHERE `code` = ?;");
            ps.setString(1, jComboBoxOrdersReceivedCode.getSelectedItem().toString());
            
            rs = ps.executeQuery();
            while (rs.next()) {
                jLabelOrdersReceivedStore1Message.setText(rs.getString("store1"));
                jLabelOrdersReceivedStore2Message.setText(rs.getString("store2"));
                jLabelOrdersReceivedDateMessage.setText(rs.getString("date"));
                jLabelOrdersReceivedCustomerMessage.setText(rs.getString("customer"));
                jLabelOrdersReceivedProductMessage.setText(rs.getString("product"));
                jLabelOrdersReceivedQuantityNumber.setText(rs.getString("quantity"));
                jLabelOrdersReceivedPaymentNumber.setText(rs.getString("payment"));
                jLabelOrdersReceivedAdvanceNumber.setText(rs.getString("advance"));
                jLabelOrdersReceivedCreditUsedNumber.setText(rs.getString("creditused"));
            } 

            //***********************                

            ps.close();
        }
        catch (Exception e){          
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        } 
    }//GEN-LAST:event_jComboBoxOrdersReceivedCodeMouseEntered

    /***
     * To see the orders that are late
     * @param evt 
     */
    
    private void jButtonInfoOrdersLateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInfoOrdersLateMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();           
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`order` ORDER BY `code`;");

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Order order = new Order();
                
                String code = rs.getString("code"); 
                String store1 = rs.getString("store1");
                String store2 = rs.getString("store2");
                String date = rs.getString("date");
                String customer = rs.getString("customer");
                String product = rs.getString("product");
                String quantity = rs.getString("quantity");
                String payment = rs.getString("payment");
                String advance = rs.getString("advance");
                String creditUsed = rs.getString("creditused");
                
                order.code = code;
                order.store1 = store1;
                order.store2 = store2;
                order.date = date;
                order.customer = customer;
                order.product = product;
                order.quantity = quantity;
                order.payment = payment;
                order.advance = advance;
                order.creditUsed = creditUsed;
                
                // To calculate the time difference between the actual date and the order's date
                // execute the query, and get a java resultset
                PreparedStatement ps1 = connection.prepareStatement("SELECT DATEDIFF(?,?);");
                ps1.setString(1, jComboBoxInfoOrdersLateDate3.getSelectedItem().toString() + "-" + jComboBoxInfoOrdersLateDate2.getSelectedItem().toString() + "-" + jComboBoxInfoOrdersLateDate1.getSelectedItem().toString());
                ps1.setString(2, order.date);
                
                ResultSet rs1 = ps1.executeQuery();
                int timeDifference = 0;
                while ( rs1.next() ) {
                    //order.remainingDays = rs1.getString(1);
                    timeDifference = Integer.parseInt(rs1.getString(1));
                }
                
                ps1 = connection.prepareStatement("SELECT `time` FROM `200130586_ipc2_proyecto1`.`time` WHERE `store1` = ? AND `store2` = ?;");
                ps1.setString(1, order.store1);
                ps1.setString(2, order.store2);
                
                rs1 = ps1.executeQuery();
                int timeStores = 0;
                while (rs1.next()) {
                    timeStores = Integer.parseInt(rs1.getString("time"));
                }
                order.remainingDays = String.valueOf(timeStores - timeDifference);                
                
                ps1.close();                 
                
                if (Integer.parseInt(order.remainingDays) < 0 ) {
                    orders.add(order);
                }
                
                order = null;

                // print the results
                System.out.format("%s, %s, %s, %s, %s, %s, %s, %s, %s, %s\n", code, store1, store2, date, customer, product, quantity, payment, advance, creditUsed);
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenInfo("PEDIDOS ATRASADOS", false, false, false, false, false, true, false, false, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonInfoOrdersLateMouseClicked

    /***
     * To see the orders from a customer
     * @param evt 
     */
    
    private void jButtonInfoOrdersCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInfoOrdersCustomerMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();   
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`order` WHERE `order`.`customer` = ? ORDER BY `code`;");
            ps.setString(1, jComboBoxInfoOrdersCustomer.getSelectedItem().toString());

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Order orderCustomer = new Order();
                
                String code = rs.getString("code");    
                String store1 = rs.getString("store1");
                String store2 = rs.getString("store2");
                String date = rs.getString("date");
                String customer = rs.getString("customer");
                String product = rs.getString("product");
                String quantity = rs.getString("quantity");
                String payment = rs.getString("payment");
                String advance = rs.getString("advance");
                String creditUsed = rs.getString("creditused");
                
                orderCustomer.code = code;
                orderCustomer.store1 = store1;
                orderCustomer.store2 = store2;
                orderCustomer.date = date;
                orderCustomer.customer = customer;
                orderCustomer.product = product;
                orderCustomer.quantity = quantity;
                orderCustomer.payment = payment;
                orderCustomer.advance = advance;
                orderCustomer.creditUsed = creditUsed;
                
                orders.add(orderCustomer);
                
                orderCustomer = null;

                // print the results
                System.out.format("%s, %s, %s, %s, %s, %s, %s, %s, %s, %s\n", code, store1, store2, date, customer, product, quantity, payment, advance, creditUsed);
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenInfo("PEDIDOS POR CLIENTE", false, false, false, false, false, true, false, false, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonInfoOrdersCustomerMouseClicked

    /***
     * To see the top sales
     * @param evt 
     */
    
    private void jButtonInfoTopSalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInfoTopSalesMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();           
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`sale` WHERE `date` BETWEEN ? AND ? ORDER BY `quantity` DESC LIMIT 10;");
            ps.setString(1, jComboBoxTopSalesDate1_3.getSelectedItem().toString() + "-" + jComboBoxTopSalesDate1_2.getSelectedItem().toString() + "-" + jComboBoxTopSalesDate1_1.getSelectedItem().toString());
            ps.setString(2, jComboBoxTopSalesDate2_3.getSelectedItem().toString() + "-" + jComboBoxTopSalesDate2_2.getSelectedItem().toString() + "-" + jComboBoxTopSalesDate2_1.getSelectedItem().toString());
            
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Sale saleCustomer = new Sale();
                
                String code = rs.getString("code");    
                String store = rs.getString("store");
                String date = rs.getString("date");
                String customer = rs.getString("customer");
                String product = rs.getString("product");
                String quantity = rs.getString("quantity");
                String payment = rs.getString("payment");
                String creditUsed = rs.getString("creditused");
                
                saleCustomer.code = code;
                saleCustomer.store = store;
                saleCustomer.date = date;
                saleCustomer.customer = customer;
                saleCustomer.product = product;
                saleCustomer.quantity = quantity;
                saleCustomer.payment = payment;
                saleCustomer.creditUsed = creditUsed;
                
                sales.add(saleCustomer);
                
                saleCustomer = null;

                // print the results
                System.out.format("%s, %s, %s, %s, %s, %s, %s, %s\n", code, store, date, customer, product, quantity, payment, creditUsed);
            }
            
            // execute the query, and get a java resultset
            ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`sold` WHERE NOT `quantity` = '0' ORDER BY `quantity` DESC LIMIT 10;");
            
            rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Sold sold = new Sold();
                
                String code = rs.getString("code");    
                String product = rs.getString("product");
                String store = rs.getString("store");
                String quantity = rs.getString("quantity");
                
                sold.code = code;
                sold.product = product;
                sold.store = store;
                sold.quantity = quantity;
                
                solds.add(sold);
                
                sold = null;

                // print the results
                System.out.format("%s, %s, %s, %s\n", code, product, store, quantity);
            }    
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenInfo("10 PRODUCTOS MAS VENDIDOS", false, false, false, false, false, false, false, true, false, true);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonInfoTopSalesMouseClicked

    /***
     * To see the top sales from a store
     * @param evt 
     */
    
    private void jButtonInfoTopSalesStoreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInfoTopSalesStoreMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();           
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`sale` WHERE `date` BETWEEN ? AND ? AND `store` = ? ORDER BY `quantity` DESC LIMIT 10;");
            ps.setString(1, jComboBoxTopSalesDate1_3.getSelectedItem().toString() + "-" + jComboBoxTopSalesDate1_2.getSelectedItem().toString() + "-" + jComboBoxTopSalesDate1_1.getSelectedItem().toString());
            ps.setString(2, jComboBoxTopSalesDate2_3.getSelectedItem().toString() + "-" + jComboBoxTopSalesDate2_2.getSelectedItem().toString() + "-" + jComboBoxTopSalesDate2_1.getSelectedItem().toString());
            ps.setString(3, jComboBoxTopSalesStore.getSelectedItem().toString());

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Sale saleCustomer = new Sale();
                
                String code = rs.getString("code");    
                String store = rs.getString("store");
                String date = rs.getString("date");
                String customer = rs.getString("customer");
                String product = rs.getString("product");
                String quantity = rs.getString("quantity");
                String payment = rs.getString("payment");
                String creditUsed = rs.getString("creditused");
                
                saleCustomer.code = code;
                saleCustomer.store = store;
                saleCustomer.date = date;
                saleCustomer.customer = customer;
                saleCustomer.product = product;
                saleCustomer.quantity = quantity;
                saleCustomer.payment = payment;
                saleCustomer.creditUsed = creditUsed;
                
                sales.add(saleCustomer);
                
                saleCustomer = null;

                // print the results
                System.out.format("%s, %s, %s, %s, %s, %s, %s, %s\n", code, store, date, customer, product, quantity, payment, creditUsed);
            }
            
            // execute the query, and get a java resultset
            ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`sold` WHERE `store` = ? AND NOT `quantity` = '0' ORDER BY `quantity` DESC LIMIT 10;");
            ps.setString(1, jComboBoxTopSalesStore.getSelectedItem().toString());
            rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Sold soldStore = new Sold();
                
                String code = rs.getString("code");    
                String product = rs.getString("product");
                String store = rs.getString("store");
                String quantity = rs.getString("quantity");
                
                soldStore.code = code;
                soldStore.product = product;
                soldStore.store = store;
                soldStore.quantity = quantity;
                
                solds.add(soldStore);
                
                soldStore = null;

                // print the results
                System.out.format("%s, %s, %s, %s\n", code, product, store, quantity);
            }               
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenInfo("10 PRODUCTOS MAS VENDIDOS POR TIENDA", false, false, false, false, false, false, false, true, false, true);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonInfoTopSalesStoreMouseClicked

    /***
     * To see the products not sold
     * @param evt 
     */
    
    private void jButtonInfoNoSalesStoreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonInfoNoSalesStoreMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();         
            
            // First we clear the arrays
            sold.clear();
            notSold.clear();
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`product` WHERE `code` IN ( SELECT `product` FROM `200130586_ipc2_proyecto1`.`sold` WHERE `quantity` = '0' ) AND `store` = ? ORDER BY `code`;");
            ps.setString(1, jComboBoxInfoNoSalesStore.getSelectedItem().toString());
            
            // We select a product list
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Product product = new Product();
                
                String name = rs.getString("name");
                String maker = rs.getString("maker");
                String code = rs.getString("code");
                String quantity = rs.getString("quantity");
                String price = rs.getString("price");
                String store = rs.getString("store");
                String description = rs.getString("description");
                String warranty = rs.getString("warranty");
                
                product.name = name;
                product.maker = maker;
                product.code = code;
                product.quantity = quantity;
                product.price = price;
                product.store = store;
                product.description = description;
                product.warranty = warranty;
                
                notSold.add(product);
                
                // print the results
                System.out.format("%s, %s, %s, %s, %s, %s, %s, %s\n", name, maker, code, quantity, price, store, description, warranty);                
                
                product = null;
            }            
            
            ps.close();
            
            //*******************************
            // Here we print on screen
            jTextAreaInfo.setText("");
            textLines.clear();
            
            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            jTextAreaInfo.append("\nPRODUCTOS NO VENDIDOS");
            textLines.add("PRODUCTOS NO VENDIDOS");
            
            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < notSold.size(); i++) {
                jTextAreaInfo.append("\nPRODUCTOS " + (i + 1) );
                jTextAreaInfo.append("\nNombre = " + notSold.get(i).name + "\nFabricante = " + notSold.get(i).maker + "\nCodigo = " + notSold.get(i).code + "\nCantidad = " + notSold.get(i).quantity + "\nPrecio = " + notSold.get(i).price + "\nTienda = " + notSold.get(i).store + "\nDescripcion = " + notSold.get(i).description + "\nGarantia = " + notSold.get(i).warranty);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("PRODUCTO " + (i + 1));
                textLines.add("Nombre = " + notSold.get(i).name);
                textLines.add("Fabricante = " + notSold.get(i).maker);
                textLines.add("Codigo = " + notSold.get(i).code);
                textLines.add("Cantidad = " + notSold.get(i).quantity);
                textLines.add("Precio = " + notSold.get(i).price);
                textLines.add("Tienda = " + notSold.get(i).store);
                textLines.add("Descripcion = " + notSold.get(i).description);
                textLines.add("Garantia = " + notSold.get(i).warranty);
            }  
            //*******************************

        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonInfoNoSalesStoreMouseClicked

    /***
     * To update information in the combobox
     * @param evt 
     */
    
    private void jComboBoxSalesProductItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxSalesProductItemStateChanged
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT `quantity` FROM `200130586_ipc2_proyecto1`.`product` WHERE `code` = ?;");
            ps.setString(1, jComboBoxSalesProduct.getSelectedItem().toString());
            
            // To print the quantity
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                jLabelSalesQuantityAvailableNumber.setText(rs.getString("quantity"));
            }

            ps.close();
        }
        catch (Exception e){           
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jComboBoxSalesProductItemStateChanged

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldOrdersAdvanceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOrdersAdvanceKeyTyped
        if ( !isDecimal(jTextFieldOrdersAdvance.getText()) ) {
            jTextFieldOrdersAdvance.setText("");
        }
    }//GEN-LAST:event_jTextFieldOrdersAdvanceKeyTyped

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldOrdersQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOrdersQuantityKeyTyped
        if ( !isInteger(jTextFieldOrdersQuantity.getText()) ) {
            jTextFieldOrdersQuantity.setText("");
        }
    }//GEN-LAST:event_jTextFieldOrdersQuantityKeyTyped

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldSalesQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSalesQuantityKeyTyped
        if ( !isInteger(jTextFieldSalesQuantity.getText()) ) {
            jTextFieldSalesQuantity.setText("");
        }
    }//GEN-LAST:event_jTextFieldSalesQuantityKeyTyped

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldStoresPhone2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldStoresPhone2KeyTyped
        if ( !isPhone(jTextFieldStoresPhone2.getText()) ) {
            jTextFieldStoresPhone2.setText("");
        }
    }//GEN-LAST:event_jTextFieldStoresPhone2KeyTyped

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldEmployeesPhoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldEmployeesPhoneKeyTyped
        if ( !isPhone(jTextFieldEmployeesPhone.getText()) ) {
            jTextFieldEmployeesPhone.setText("");
        }
    }//GEN-LAST:event_jTextFieldEmployeesPhoneKeyTyped

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldEmployeesDPIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldEmployeesDPIKeyTyped
        if ( !isPhone(jTextFieldEmployeesDPI.getText()) ) {
            jTextFieldEmployeesDPI.setText("");
        }
    }//GEN-LAST:event_jTextFieldEmployeesDPIKeyTyped

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldProductsQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldProductsQuantityKeyTyped
        if ( !isInteger(jTextFieldProductsQuantity.getText()) ) {
            jTextFieldProductsQuantity.setText("");
        }
    }//GEN-LAST:event_jTextFieldProductsQuantityKeyTyped

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldProductsPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldProductsPriceKeyTyped
        if ( !isDecimal(jTextFieldProductsPrice.getText()) ) {
            jTextFieldProductsPrice.setText("");
        }
    }//GEN-LAST:event_jTextFieldProductsPriceKeyTyped

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldCustomersPhoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCustomersPhoneKeyTyped
        if ( !isPhone(jTextFieldCustomersPhone.getText()) ) {
            jTextFieldCustomersPhone.setText("");
        }
    }//GEN-LAST:event_jTextFieldCustomersPhoneKeyTyped

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldCustomersDPIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCustomersDPIKeyTyped

    }//GEN-LAST:event_jTextFieldCustomersDPIKeyTyped

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldStoresPhone1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldStoresPhone1KeyTyped
        if ( !isPhone(jTextFieldStoresPhone1.getText()) ) {
            jTextFieldStoresPhone1.setText("");
        }
    }//GEN-LAST:event_jTextFieldStoresPhone1KeyTyped

    /***
     * To protect the information entered
     * @param evt 
     */
    
    private void jTextFieldSalesCreditKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSalesCreditKeyTyped
        if ( !isDecimal(jTextFieldSalesCredit.getText()) ) {
            jTextFieldSalesCredit.setText("");
        }
    }//GEN-LAST:event_jTextFieldSalesCreditKeyTyped

    /***
     * To update info in the combobox
     * @param evt 
     */
    
    private void jComboBoxOrdersCustomerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxOrdersCustomerMouseEntered
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT `NIT` FROM `200130586_ipc2_proyecto1`.`customer` ORDER BY `NIT`;");
            
            //***********************

            // Customer's NIT
            ResultSet rs = ps.executeQuery();
            jComboBoxOrdersCustomer.removeAllItems();
            while (rs.next()) {
                jComboBoxOrdersCustomer.addItem(rs.getString("NIT"));
            }  

            //***********************
            
            ps.close();
        }
        catch (Exception e){           
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        }            
    }//GEN-LAST:event_jComboBoxOrdersCustomerMouseEntered

    /***
     * To update info in the combobox
     * @param evt 
     */
    
    private void jComboBoxSalesCustomerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxSalesCustomerMouseEntered
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT `NIT` FROM `200130586_ipc2_proyecto1`.`customer` ORDER BY `NIT`;");
            
            //***********************

            // Customer's NIT
            ResultSet rs = ps.executeQuery();
            jComboBoxSalesCustomer.removeAllItems();
            while (rs.next()) {
                jComboBoxSalesCustomer.addItem(rs.getString("NIT"));
            }  

            //***********************
            
            ps.close();
        }
        catch (Exception e){           
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        }   
    }//GEN-LAST:event_jComboBoxSalesCustomerMouseEntered

    /***
     * To update info in the combobox
     * @param evt 
     */
    
    private void jComboBoxInfoBuyingsCustomerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxInfoBuyingsCustomerMouseEntered
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT `NIT` FROM `200130586_ipc2_proyecto1`.`customer` ORDER BY `NIT`;");
            
            //***********************

            // Customer's NIT
            ResultSet rs = ps.executeQuery();
            jComboBoxInfoBuyingsCustomer.removeAllItems();
            while (rs.next()) {
                jComboBoxInfoBuyingsCustomer.addItem(rs.getString("NIT"));
            }  

            //***********************
            
            ps.close();
        }
        catch (Exception e){           
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        }   
    }//GEN-LAST:event_jComboBoxInfoBuyingsCustomerMouseEntered

    /***
     * To update info in the combobox
     * @param evt 
     */
    
    private void jComboBoxInfoOrdersCustomerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxInfoOrdersCustomerMouseEntered
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT `NIT` FROM `200130586_ipc2_proyecto1`.`customer` ORDER BY `NIT`;");
            
            //***********************

            // Customer's NIT
            ResultSet rs = ps.executeQuery();
            jComboBoxInfoOrdersCustomer.removeAllItems();
            while (rs.next()) {
                jComboBoxInfoOrdersCustomer.addItem(rs.getString("NIT"));
            }  

            //***********************
            
            ps.close();
        }
        catch (Exception e){           
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        }   
    }//GEN-LAST:event_jComboBoxInfoOrdersCustomerMouseEntered

    /***
     * To see the available quantity of products
     * @param evt 
     */
    
    private void jButtonOrdersQuantityAvailableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOrdersQuantityAvailableMouseClicked
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT `quantity` FROM `200130586_ipc2_proyecto1`.`product` WHERE `code` = ?;");
            ps.setString(1, jComboBoxOrdersProduct.getSelectedItem().toString());
            
            // To print the quantity
            ResultSet rs = ps.executeQuery();
            
            int quantityAvailable = 0;
            int quantityTyped = Integer.parseInt(jTextFieldOrdersQuantity.getText());
            while (rs.next()) {
                quantityAvailable = Integer.parseInt(rs.getString("quantity"));
                jLabelOrdersQuantityAvailableNumber.setText(rs.getString("quantity"));
            }
            
            if ( quantityTyped > quantityAvailable ) {
                jTextFieldOrdersQuantity.setText(String.valueOf(quantityAvailable));
            }
            else if ( quantityTyped < 0.0 ) {
                jTextFieldOrdersQuantity.setText("0");
            } 
            
            rs.close();
            
            // To print the customer's credit
            ps = connection.prepareStatement("SELECT `credit` FROM `200130586_ipc2_proyecto1`.`customer` WHERE `NIT` = ?;");
            ps.setString(1, jComboBoxOrdersCustomer.getSelectedItem().toString());
            
            rs = ps.executeQuery();
            
            double customerCredit = 0.0;
            double creditTyped = Double.parseDouble(jTextFieldOrdersCustomerCredit.getText());
            while (rs.next()) {
                customerCredit = Double.parseDouble(rs.getString("credit"));
                jLabelOrdersCreditAvailableNumber.setText(rs.getString("credit"));
            }                
            
            if ( creditTyped > customerCredit ) {
                jTextFieldOrdersCustomerCredit.setText(String.valueOf(customerCredit));
            }
            else if ( creditTyped < 0.0 ) {
                jTextFieldOrdersCustomerCredit.setText("0.0");
            }

            ps.close();
        }
        catch (Exception e){           
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonOrdersQuantityAvailableMouseClicked

    /***
     * To review the prices
     * @param evt 
     */
    
    private void jButtonOrdersPriceReviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOrdersPriceReviewMouseClicked
        try {                              
            // To use quantity as an acceptable integer
            int quantityAvailable = Integer.parseInt(jLabelOrdersQuantityAvailableNumber.getText());
            int quantityIntroduced = Integer.parseInt(jTextFieldOrdersQuantity.getText());
            int quantity = 0;

            if ( quantityIntroduced > quantityAvailable ) {
                quantity = quantityAvailable;
            }
            else if ( quantityIntroduced < 0 ) {
                quantity = 0;
            }
            else {
                quantity = quantityIntroduced;
            }            
            jTextFieldOrdersQuantity.setText(String.valueOf(quantity));  
            
            // To use credit as an acceptable number
            double creditAvailable = Double.parseDouble(jLabelOrdersCreditAvailableNumber.getText());
            double creditIntroduced = Double.parseDouble(jTextFieldOrdersCustomerCredit.getText());
            double customerCredit = 0.0;

            if ( creditIntroduced > creditAvailable ) {
                customerCredit = creditAvailable;
            }
            else if ( creditIntroduced < 0 ) {
                customerCredit = 0.0;
            }
            else {
                customerCredit = creditIntroduced;
            }            
            jTextFieldOrdersCustomerCredit.setText(String.valueOf(customerCredit));         
            
            // To print the advance payment 25%
            PreparedStatement ps = connection.prepareStatement("SELECT `price` FROM `200130586_ipc2_proyecto1`.`product` WHERE `code` = ?;");
            ps.setString(1, jComboBoxOrdersProduct.getSelectedItem().toString());
            
            ResultSet rs = ps.executeQuery();
            
            double quantityTyped = Double.parseDouble(jTextFieldOrdersQuantity.getText());
            String price = "0.0";
            double totalPayment = 0.0;
            double advance = 0.0;
            while (rs.next()) {
                price = rs.getString(1);
                totalPayment = Double.parseDouble(price) * quantityTyped;
                advance = totalPayment * 0.25;

                if ( (advance + customerCredit) > totalPayment ) {
                    customerCredit = totalPayment - advance;
                    jTextFieldOrdersCustomerCredit.setText(String.valueOf(customerCredit));
                    //creditAvailable -= customerCredit;
                    //jLabelOrdersCreditAvailableNumber.setText(String.valueOf(creditAvailable));
                }
                
                jTextFieldOrdersCustomerCredit.setText(String.valueOf(customerCredit));
                jLabelOrdersPriceNumber.setText(price);
                jLabelOrdersPaymentTotalNumber.setText(String.valueOf(totalPayment));
                jTextFieldOrdersAdvance.setText(String.valueOf(advance));
            }    
            
            double deliveryPayment = totalPayment - advance - customerCredit;
            jLabelOrdersPaymentDeliveryNumber.setText(String.valueOf(deliveryPayment));
            
            // Updates the customer's credit, if payment is 100% credit bonus is 5%, if not then 2%
            Double bonusCredit = 0.0;
            if ( advance == totalPayment ) {
                bonusCredit = totalPayment * 0.05;
            }
            else {
                bonusCredit = totalPayment * 0.02;
            }
            jLabelOrdersNewCreditNumber.setText(String.valueOf(bonusCredit));            

            ps.close();
        }
        catch (Exception e){           
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonOrdersPriceReviewMouseClicked

    /***
     * To see the available quantity of products
     * @param evt 
     */
    
    private void jButtonSalesQuantityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSalesQuantityMouseClicked
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT `quantity` FROM `200130586_ipc2_proyecto1`.`product` WHERE `code` = ?;");
            ps.setString(1, jComboBoxSalesProduct.getSelectedItem().toString());
            
            // To print the quantity
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                jLabelSalesQuantityAvailableNumber.setText(rs.getString("quantity"));
            }
            
            // To set the dustomer's available credit
            ps = connection.prepareStatement("SELECT `credit` FROM `200130586_ipc2_proyecto1`.`customer` WHERE `NIT` = ?;");
            ps.setString(1, jComboBoxSalesCustomer.getSelectedItem().toString());
            
            rs = ps.executeQuery();
            while (rs.next()) {
                jLabelSalesCreditAvailableNumber.setText(rs.getString("credit"));
            }             

            ps.close();
        }
        catch (Exception e){           
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonSalesQuantityMouseClicked

    /***
     * To review the prices
     * @param evt 
     */
    
    private void jButtonSalesPriceReviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSalesPriceReviewMouseClicked
        try {                 
            // To use quantity as an acceptable integer
            int quantityAvailable = Integer.parseInt(jLabelSalesQuantityAvailableNumber.getText());
            int quantityIntroduced = Integer.parseInt(jTextFieldSalesQuantity.getText());
            int quantity = 0;

            if ( quantityIntroduced > quantityAvailable ) {
                quantity = quantityAvailable;
            }
            else if ( quantityIntroduced < 0 ) {
                quantity = 0;
            }
            else {
                quantity = quantityIntroduced;
            }            
            jTextFieldSalesQuantity.setText(String.valueOf(quantity)); 
            
            // To process the payment
            PreparedStatement ps = connection.prepareStatement("SELECT `credit` FROM `200130586_ipc2_proyecto1`.`customer` WHERE `NIT` = ?;");
            ps.setString(1, jComboBoxSalesCustomer.getSelectedItem().toString());
            
            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                jLabelSalesCreditAvailableNumber.setText(rs.getString("credit"));
            }
            
            // To measure the credit
            double credit = 0.0;
            double creditAvailable = Double.parseDouble(jLabelSalesCreditAvailableNumber.getText());
            if ( credit > creditAvailable ) {
                credit = creditAvailable;
            }
            else if ( credit < 0.0 ) {
                credit = 0.0;
            }
            else {
                credit = Double.parseDouble(jTextFieldSalesCredit.getText());
            }            
            
            ps = connection.prepareStatement("SELECT `price` FROM `200130586_ipc2_proyecto1`.`product` WHERE `code` = ?;");
            ps.setString(1, jComboBoxSalesProduct.getSelectedItem().toString());
            
            rs = ps.executeQuery();
            
            double quantityTyped = Double.parseDouble(jTextFieldSalesQuantity.getText());
            String price = "0.0";
            double totalPayment = 0.0;
            while (rs.next()) {
                price = rs.getString(1);
                totalPayment = (Double.parseDouble(price) * quantityTyped) - credit;
                jLabelSalesPriceReviewNumber.setText(price);
                jLabelSalesPaymentNumber.setText(String.valueOf(totalPayment));
            }          

            ps.close();
        }
        catch (Exception e){           
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonSalesPriceReviewMouseClicked

    /***
     * To update info in the combobox
     * @param evt 
     */
    
    private void jComboBoxDeliveryCodeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxDeliveryCodeMouseEntered
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT `code` FROM `200130586_ipc2_proyecto1`.`orderreceived` ORDER BY `code`;");
            
            ResultSet rs = ps.executeQuery();
            
            jComboBoxDeliveryCode.removeAllItems();
            while (rs.next()) {
                jComboBoxDeliveryCode.addItem(rs.getString("code"));
            }            
            
            ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`orderreceived` WHERE `code` = ?;");
            ps.setString(1, jComboBoxDeliveryCode.getSelectedItem().toString());
            
            rs = ps.executeQuery();
            
            while (rs.next()) {
                jLabelDeliveryStore1Message.setText(rs.getString("store1"));
                jLabelDeliveryStore2Message.setText(rs.getString("store2"));
                jLabelDeliveryDateMessage.setText(rs.getString("date"));
                jLabelDeliveryCustomerMessage.setText(rs.getString("customer"));
                jLabelDeliveryProductMessage.setText(rs.getString("product"));
                jLabelDeliveryQuantityNumber.setText(rs.getString("quantity"));
                jLabelDeliveryPaymentNumber.setText(rs.getString("payment"));
                jLabelDeliveryAdvancetNumber.setText(rs.getString("advance"));
                jLabelDeliveryCreditUsedNumber.setText(rs.getString("creditused"));
            }

            //***********************                

            ps.close();
        }
        catch (Exception e){          
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        } 
    }//GEN-LAST:event_jComboBoxDeliveryCodeMouseEntered

    /***
     * To update info in the combobox
     * @param evt 
     */
    
    private void jComboBoxDeliveryCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxDeliveryCodeItemStateChanged
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`orderreceived` WHERE `code` = ?;");        
            ps.setString(1, jComboBoxDeliveryCode.getSelectedItem().toString());

            ResultSet rs = ps.executeQuery();
            
            while (rs.next()) {
                jLabelDeliveryStore1Message.setText(rs.getString("store1"));
                jLabelDeliveryStore2Message.setText(rs.getString("store2"));
                jLabelDeliveryDateMessage.setText(rs.getString("date"));
                jLabelDeliveryCustomerMessage.setText(rs.getString("customer"));
                jLabelDeliveryProductMessage.setText(rs.getString("product"));
                jLabelDeliveryQuantityNumber.setText(rs.getString("quantity"));
                jLabelDeliveryPaymentNumber.setText(rs.getString("payment"));
                jLabelDeliveryAdvancetNumber.setText(rs.getString("advance"));
                jLabelDeliveryCreditUsedNumber.setText(rs.getString("creditused"));
            } 

            //***********************                

            ps.close();
        }
        catch (Exception e){          
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        } 
    }//GEN-LAST:event_jComboBoxDeliveryCodeItemStateChanged

    /***
     * To insert data about the delivery
     * @param evt 
     */
    
    private void jButtonDeliveryIntroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeliveryIntroMouseClicked
        //To upload data to the table
        
        jLabelDeliveryMessage.setText("Introduciendo entrega");
        System.out.println("Introduciendo pedido entrega");
        try {              
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`orderreceived` WHERE `code` = ?;");
            ps.setString(1, jComboBoxDeliveryCode.getSelectedItem().toString());

            ResultSet rs = ps.executeQuery(); 

            String code = "";
            String store1 = "";
            String store2 = "";
            String date = "";
            String customer = "";
            String product = "";
            String quantity = "";
            String payment = "";
            String advance = "";
            String creditUsed = "";

            while (rs.next()) {
                code = rs.getString("code");
                code += "_D"; 
                store1 = rs.getString("store1");
                store2 = rs.getString("store2");
                date = rs.getString("date");
                customer = rs.getString("customer");
                product = rs.getString("product");
                quantity = rs.getString("quantity");
                payment = rs.getString("payment");
                advance = rs.getString("advance");
                creditUsed = rs.getString("creditused");
            }
            

            // We introduce the delivery
            ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`delivery` (`code`,`store1`,`store2`,`date`,`customer`,`product`,`quantity`,`advance`,`payment`,`creditused`) VALUES (?,?,?,?,?,?,?,?,?,?);");
            ps.setString(1, code);
            ps.setString(2, store1);
            ps.setString(3, store2);
            ps.setString(4, jComboBoxDeliveryDateDelivery3.getSelectedItem().toString() + "-" + jComboBoxDeliveryDateDelivery2.getSelectedItem().toString() + "-" + jComboBoxDeliveryDateDelivery1.getSelectedItem().toString());
            ps.setString(5, customer);
            ps.setString(6, product);
            ps.setString(7, quantity);
            ps.setString(8, advance);
            ps.setString(9, payment);
            ps.setString(10, creditUsed);
            
            ps.executeUpdate();

            // We delete the order received
            ps = connection.prepareStatement("DELETE FROM `200130586_ipc2_proyecto1`.`orderreceived` WHERE `code` = ?;");
            ps.setString(1, jComboBoxDeliveryCode.getSelectedItem().toString());
            
            ps.executeUpdate();

            // We add a new sale
            double totalPayment = Double.parseDouble(payment) + Double.parseDouble(advance);
            
            ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`sale` (`code`,`store`,`date`,`customer`,`product`,`quantity`,`payment`) VALUES (?,?,?,?,?,?,?);");
            ps.setString(1, code);
            ps.setString(2, store1);
            ps.setString(3, jComboBoxDeliveryDateDelivery3.getSelectedItem().toString() + "-" + jComboBoxDeliveryDateDelivery2.getSelectedItem().toString() + "-" + jComboBoxDeliveryDateDelivery1.getSelectedItem().toString());
            ps.setString(4, customer);
            ps.setString(5, product);
            ps.setString(6, quantity);
            ps.setString(7, String.valueOf(totalPayment));
            
            ps.executeUpdate();         

            // Updates quantity in sold products
            int quantitySold = Integer.parseInt(quantity);
            
            ps = connection.prepareStatement("SELECT `quantity` FROM `200130586_ipc2_proyecto1`.`sold` WHERE `product` = ? AND `store` = ?;");
            ps.setString(1, product);
            ps.setString(2, store1);
            
            rs = ps.executeQuery();
            
            while ( rs.next() ) {
                quantitySold += Integer.parseInt(rs.getString("quantity"));
            }
            
            ps = connection.prepareStatement("REPLACE INTO `200130586_ipc2_proyecto1`.`sold` (`code`,`product`,`store`,`quantity`) VALUES (?,?,?,?);");
            ps.setString(1, product + store1);
            ps.setString(2, product);
            ps.setString(3, store1);
            ps.setString(4, String.valueOf(quantitySold));
            ps.executeUpdate();

            // And finally
            jLabelDeliveryMessage.setText(code + " introducido con éxito");
            System.out.println(code + " introducido con éxito");            
            
            //*************************
            // This updates when an Order is delivered  
            ps = connection.prepareStatement("SELECT `code` FROM `200130586_ipc2_proyecto1`.`order` ORDER BY `code`;");
            
            rs = ps.executeQuery();
            
            jComboBoxDeliveryCode.removeAllItems();
            while (rs.next()) {
                jComboBoxDeliveryCode.addItem(rs.getString("code"));
            }
            
            ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`order` WHERE `code` = ?;");
            ps.setString(1, jComboBoxDeliveryCode.getSelectedItem().toString());
            
            rs = ps.executeQuery();
            while (rs.next()) {
                jLabelDeliveryStore1Message.setText(rs.getString("store1"));
                jLabelDeliveryStore2Message.setText(rs.getString("store2"));
                jLabelDeliveryDateMessage.setText(rs.getString("date"));
                jLabelDeliveryCustomerMessage.setText(rs.getString("customer"));
                jLabelDeliveryProductMessage.setText(rs.getString("product"));
                jLabelDeliveryQuantityNumber.setText(rs.getString("quantity"));
                jLabelDeliveryPaymentNumber.setText(rs.getString("payment"));
                jLabelDeliveryAdvancetNumber.setText(rs.getString("advance"));
                jLabelDeliveryCreditUsedNumber.setText(rs.getString("creditused"));
            } 
            //***********************              

            ps.close();
        }
        catch (Exception e){
            jLabelOrdersReceivedMessage.setText("No se pudo introducir la entrega");
            System.out.println("No se pudo introducir la entrega");            
            System.err.println("Exception!");
            System.err.println(e.getMessage());
        } 
    }//GEN-LAST:event_jButtonDeliveryIntroMouseClicked

    /***
     * To protect the info
     * @param evt 
     */
    
    private void jTextFieldOrdersCustomerCreditKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOrdersCustomerCreditKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldOrdersCustomerCreditKeyTyped

    /***
     * To insert the data about stores
     * @param evt 
     */
    
    private void jButtonDataBaseStoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDataBaseStoresMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();  
            
            // We clear the screen
            jTextAreaDataBase.setText("");
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`store` WHERE `name` LIKE ? AND `code` LIKE ? ORDER BY `code` ASC;");
            ps.setString(1, "%" + jTextFieldDataBaseStoresName.getText() + "%");
            ps.setString(2, "%" + jTextFieldDataBaseStoresCode.getText() + "%");

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Store store = new Store();
                
                String name = rs.getString("name");    
                String address = rs.getString("address");
                String code = rs.getString("code");
                String phone1 = rs.getString("phone1");
                String phone2 = rs.getString("phone2");
                String email = rs.getString("email");
                String hours = rs.getString("hours");                
                
                store.name = name;
                store.address = address;
                store.code = code;
                store.phone1 = phone1;
                store.phone2 = phone2;
                store.email = email;
                store.hours = hours;
                
                stores.add(store);
                
                store = null;
            }
            
            ps.close();         
            
            // Prints orders we are waiting for
            printOnScreenDataBase("TIENDAS", true, false, false, false, false, false, false, false, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonDataBaseStoresMouseClicked

    /***
     * To insert the data about employees
     * @param evt 
     */
    
    private void jButtonDataBaseEmployeesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDataBaseEmployeesMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();     
            
            // We clear the screen
            jTextAreaDataBase.setText("");            
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`employee` WHERE `name` LIKE ? AND `code` LIKE ? ORDER BY `code` ASC;");
            ps.setString(1, "%" + jTextFieldDataBaseEmployeesName.getText() + "%");
            ps.setString(2, "%" + jTextFieldDataBaseEmployeesCode.getText() + "%");

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Employee employee = new Employee();
                
                String name = rs.getString("name");    
                String code = rs.getString("code");
                String phone = rs.getString("phone");
                String DPI = rs.getString("DPI");
                
                employee.name = name;
                employee.code = code;
                employee.phone = phone;
                employee.DPI = DPI;
                
                employees.add(employee);
                
                employee = null;
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenDataBase("EMPLEADOS", false, true, false, false, false, false, false, false, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonDataBaseEmployeesMouseClicked

    /***
     * To insert the data about time between stores
     * @param evt 
     */
    
    private void jButtonDataBaseTimeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDataBaseTimeMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();   
            
            // We clear the screen
            jTextAreaDataBase.setText("");            
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`time` ORDER BY `time` ASC;");

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Time timeStores = new Time();

                String code = rs.getString("code");    
                String store1 = rs.getString("store1");
                String store2 = rs.getString("store2");
                String time = rs.getString("time");                
                
                timeStores.code = code;
                timeStores.store1 = store1;
                timeStores.store2 = store2;
                timeStores.time = time;
                
                times.add(timeStores);
                
                timeStores = null;
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenDataBase("TIEMPO ENTRE TIENDAS", false, false, true, false, false, false, false, false, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonDataBaseTimeMouseClicked

    /***
     * To insert the data about products
     * @param evt 
     */
    
    private void jButtonDataBaseProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDataBaseProductsMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();    
            
            // We clear the screen
            jTextAreaDataBase.setText("");            
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`product` WHERE `name` LIKE ? AND `code` LIKE ? AND `store` LIKE ? ORDER BY `code` ASC;");
            ps.setString(1, "%" + jTextFieldDataBaseProductsName.getText() + "%");
            ps.setString(2, "%" + jTextFieldDataBaseProductsCode.getText() + "%");
            ps.setString(3, "%" + jTextFieldDataBaseProductsStore.getText() + "%");

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Product product = new Product();
                
                String name = rs.getString("name");    
                String maker = rs.getString("maker");
                String code = rs.getString("code");
                String quantity = rs.getString("quantity");
                String price = rs.getString("price");
                String store = rs.getString("store");
                String description = rs.getString("description");
                String warranty = rs.getString("warranty");                
                
                product.name = name;
                product.maker = maker;
                product.code = code;
                product.quantity = quantity;
                product.price = price;
                product.store = store;
                product.description = description;
                product.warranty = warranty;
                
                products.add(product);
                
                product = null;
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenDataBase("PRODUCTOS", false, false, false, true, false, false, false, false, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonDataBaseProductsMouseClicked

    /***
     * To insert the data about new customer
     * @param evt 
     */
    
    private void jButtonDataBaseCustomersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDataBaseCustomersMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();   
            
            // We clear the screen
            jTextAreaDataBase.setText("");            
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`customer` WHERE `name` LIKE ? AND `NIT` LIKE ? ORDER BY `NIT` ASC;");
            ps.setString(1, "%" + jTextFieldDataBaseCustomersName.getText() + "%");
            ps.setString(2, "%" + jTextFieldDataBaseCustomersNIT.getText() + "%");

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Customer customer = new Customer();
                
                String name = rs.getString("name");  
                String phone = rs.getString("phone");
                String NIT = rs.getString("NIT");
                String DPI = rs.getString("DPI");
                String credit = rs.getString("credit");
                String email = rs.getString("email");
                String address = rs.getString("address");                
                
                customer.name = name;
                customer.phone = phone;
                customer.NIT = NIT;
                customer.DPI = DPI;
                customer.credit = credit;
                customer.email = email;
                customer.address = address;
                
                customers.add(customer);
                
                customer = null;
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenDataBase("CLIENTES", false, false, false, false, true, false, false, false, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonDataBaseCustomersMouseClicked

    /***
     * To insert the data about new orders
     * @param evt 
     */
    
    private void jButtonDataBaseOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDataBaseOrdersMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();    
            
            // We clear the screen
            jTextAreaDataBase.setText("");            
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`order` ORDER BY `code` ASC;");

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Order order = new Order();
                
                String code = rs.getString("code");  
                String store1 = rs.getString("store1");
                String store2 = rs.getString("store2");
                String date = rs.getString("date");
                String customer = rs.getString("customer");
                String product = rs.getString("product");
                String quantity = rs.getString("quantity");
                String payment = rs.getString("payment");
                String advance = rs.getString("advance");
                String creditUsed = rs.getString("creditused");                
                
                order.code = code;
                order.store1 = store1;
                order.store2 = store2;
                order.date = date;
                order.customer = customer;
                order.product = product;
                order.quantity = quantity;
                order.payment = payment;
                order.advance = advance;
                order.creditUsed = creditUsed;
                
                orders.add(order);
                
                order = null;
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenDataBase("PEDIDOS", false, false, false, false, false, true, false, false, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonDataBaseOrdersMouseClicked

    /***
     * To insert data about orders received
     * @param evt 
     */
    
    private void jButtonDataBaseOrdersReceivedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDataBaseOrdersReceivedMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();     
            
            // We clear the screen
            jTextAreaDataBase.setText("");            
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`orderreceived` ORDER BY `code` ASC;");

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                OrderReceived orderReceived = new OrderReceived();
                
                String code = rs.getString("code");  
                String store1 = rs.getString("store1");
                String store2 = rs.getString("store2");
                String date = rs.getString("date");
                String customer = rs.getString("customer");
                String product = rs.getString("product");
                String quantity = rs.getString("quantity");
                String payment = rs.getString("payment");
                String advance = rs.getString("advance");
                String creditUsed = rs.getString("creditused");                
                
                orderReceived.code = code;
                orderReceived.store1 = store1;
                orderReceived.store2 = store2;
                orderReceived.date = date;
                orderReceived.customer = customer;
                orderReceived.product = product;
                orderReceived.quantity = quantity;
                orderReceived.payment = payment;
                orderReceived.advance = advance;
                orderReceived.creditUsed = creditUsed;
                
                ordersReceived.add(orderReceived);
                
                orderReceived = null;
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenDataBase("PEDIDOS RECIBIDOS", false, false, false, false, false, false, true, false, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonDataBaseOrdersReceivedMouseClicked

    /***
     * To insert data about sales
     * @param evt 
     */
    
    private void jButtonDataBaseSalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDataBaseSalesMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();   
            
            // We clear the screen
            jTextAreaDataBase.setText("");            
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`sale` ORDER BY `code` ASC;");

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Sale sale = new Sale();
                
                String code = rs.getString("code");  
                String store = rs.getString("store");
                String date = rs.getString("date");
                String customer = rs.getString("customer");
                String product = rs.getString("product");
                String quantity = rs.getString("quantity");
                String payment = rs.getString("payment");
                String creditUsed = rs.getString("creditused");                
                
                sale.code = code;
                sale.store = store;
                sale.date = date;
                sale.customer = customer;
                sale.product = product;
                sale.quantity = quantity;
                sale.payment = payment;
                sale.creditUsed = creditUsed;
                
                sales.add(sale);
                
                sale = null;
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenDataBase("VENTAS", false, false, false, false, false, false, false, true, false, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonDataBaseSalesMouseClicked

    /***
     * To insert data about deliveries
     * @param evt 
     */
    
    private void jButtonDataBaseDeliveryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDataBaseDeliveryMouseClicked
        try {
            // We clear the arrays
            clearDatabaseArrays();      
            
            // We clear the screen
            jTextAreaDataBase.setText("");            
            
            // create the java statement
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM `200130586_ipc2_proyecto1`.`delivery` ORDER BY `code` ASC;");

            // execute the query, and get a java resultset
            ResultSet rs = ps.executeQuery();
            
            // iterate through the java resultset
            while (rs.next())
            {   
                Delivery delivery = new Delivery();
                
                String code = rs.getString("code");  
                String store1 = rs.getString("store1");
                String store2 = rs.getString("store2");
                String date = rs.getString("date");
                String customer = rs.getString("customer");
                String product = rs.getString("product");
                String quantity = rs.getString("quantity");
                String advance = rs.getString("advance");
                String payment = rs.getString("payment");
                String creditUsed = rs.getString("creditused");                
                
                delivery.code = code;
                delivery.store1 = store1;
                delivery.store2 = store2;
                delivery.date = date;
                delivery.customer = customer;
                delivery.product = product;
                delivery.quantity = quantity;
                delivery.advance = advance;
                delivery.payment = payment;
                delivery.creditUsed = creditUsed;
                
                deliveries.add(delivery);
                
                delivery = null;
            }
            
            ps.close();
            
            // Prints orders we are waiting for
            printOnScreenDataBase("ENTREGAS AL CLIENTE", false, false, false, false, false, false, false, false, true, false);
        }
        catch (Exception e)
        {
            System.err.println("Got an exception! ");
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jButtonDataBaseDeliveryMouseClicked


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrameEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrameEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrameEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrameEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrameEmployees().setVisible(true);
            }
        });      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCustomersIntro;
    private javax.swing.JButton jButtonDataBaseCustomers;
    private javax.swing.JButton jButtonDataBaseDelivery;
    private javax.swing.JButton jButtonDataBaseEmployees;
    private javax.swing.JButton jButtonDataBaseOrders;
    private javax.swing.JButton jButtonDataBaseOrdersReceived;
    private javax.swing.JButton jButtonDataBaseProducts;
    private javax.swing.JButton jButtonDataBaseSales;
    private javax.swing.JButton jButtonDataBaseStores;
    private javax.swing.JButton jButtonDataBaseTime;
    private javax.swing.JButton jButtonDeliveryIntro;
    private javax.swing.JButton jButtonEmployeesIntro;
    private javax.swing.JButton jButtonInfoBuyingsCustomer;
    private javax.swing.JButton jButtonInfoConnect;
    private javax.swing.JPanel jButtonInfoData;
    private javax.swing.JButton jButtonInfoExport;
    private javax.swing.JButton jButtonInfoImportData;
    private javax.swing.JButton jButtonInfoNoSalesStore;
    private javax.swing.JButton jButtonInfoOrdersCustomer;
    private javax.swing.JButton jButtonInfoOrdersInProcess;
    private javax.swing.JButton jButtonInfoOrdersLate;
    private javax.swing.JButton jButtonInfoOrdersReceived;
    private javax.swing.JButton jButtonInfoTopSales;
    private javax.swing.JButton jButtonInfoTopSalesStore;
    private javax.swing.JButton jButtonOrdersIntro;
    private javax.swing.JButton jButtonOrdersPriceReview;
    private javax.swing.JButton jButtonOrdersQuantityAvailable;
    private javax.swing.JButton jButtonOrdersReceivedIntro;
    private javax.swing.JButton jButtonProductsIntro;
    private javax.swing.JButton jButtonSalesIntro;
    private javax.swing.JButton jButtonSalesPriceReview;
    private javax.swing.JButton jButtonSalesQuantity;
    private javax.swing.JButton jButtonStoresIntro;
    private javax.swing.JButton jButtonTimeIntro;
    private javax.swing.JComboBox<String> jComboBoxDeliveryCode;
    private javax.swing.JComboBox<String> jComboBoxDeliveryDateDelivery1;
    private javax.swing.JComboBox<String> jComboBoxDeliveryDateDelivery2;
    private javax.swing.JComboBox<String> jComboBoxDeliveryDateDelivery3;
    private javax.swing.JComboBox<String> jComboBoxInfoBuyingsCustomer;
    private javax.swing.JComboBox<String> jComboBoxInfoNoSalesStore;
    private javax.swing.JComboBox<String> jComboBoxInfoOrdersCustomer;
    private javax.swing.JComboBox<String> jComboBoxInfoOrdersLateDate1;
    private javax.swing.JComboBox<String> jComboBoxInfoOrdersLateDate2;
    private javax.swing.JComboBox<String> jComboBoxInfoOrdersLateDate3;
    private javax.swing.JComboBox<String> jComboBoxOrdersCustomer;
    private javax.swing.JComboBox<String> jComboBoxOrdersDate1;
    private javax.swing.JComboBox<String> jComboBoxOrdersDate2;
    private javax.swing.JComboBox<String> jComboBoxOrdersDate3;
    private javax.swing.JComboBox<String> jComboBoxOrdersProduct;
    private javax.swing.JComboBox<String> jComboBoxOrdersReceivedCode;
    private javax.swing.JComboBox<String> jComboBoxOrdersReceivedDateArraived1;
    private javax.swing.JComboBox<String> jComboBoxOrdersReceivedDateArraived2;
    private javax.swing.JComboBox<String> jComboBoxOrdersReceivedDateArraived3;
    private javax.swing.JComboBox<String> jComboBoxOrdersStore1;
    private javax.swing.JComboBox<String> jComboBoxOrdersStore2;
    private javax.swing.JComboBox<String> jComboBoxProductsStore;
    private javax.swing.JComboBox<String> jComboBoxSalesCustomer;
    private javax.swing.JComboBox<String> jComboBoxSalesDate1;
    private javax.swing.JComboBox<String> jComboBoxSalesDate2;
    private javax.swing.JComboBox<String> jComboBoxSalesDate3;
    private javax.swing.JComboBox<String> jComboBoxSalesProduct;
    private javax.swing.JComboBox<String> jComboBoxSalesStore;
    private javax.swing.JComboBox<String> jComboBoxTimeStore1;
    private javax.swing.JComboBox<String> jComboBoxTimeStore2;
    private javax.swing.JComboBox<String> jComboBoxTopSalesDate1_1;
    private javax.swing.JComboBox<String> jComboBoxTopSalesDate1_2;
    private javax.swing.JComboBox<String> jComboBoxTopSalesDate1_3;
    private javax.swing.JComboBox<String> jComboBoxTopSalesDate2_1;
    private javax.swing.JComboBox<String> jComboBoxTopSalesDate2_2;
    private javax.swing.JComboBox<String> jComboBoxTopSalesDate2_3;
    private javax.swing.JComboBox<String> jComboBoxTopSalesStore;
    private javax.swing.JComboBox<String> jComboBoxTopSalesStoreDate1_1;
    private javax.swing.JComboBox<String> jComboBoxTopSalesStoreDate1_2;
    private javax.swing.JComboBox<String> jComboBoxTopSalesStoreDate1_3;
    private javax.swing.JComboBox<String> jComboBoxTopSalesStoreDate2_1;
    private javax.swing.JComboBox<String> jComboBoxTopSalesStoreDate2_2;
    private javax.swing.JComboBox<String> jComboBoxTopSalesStoreDate2_3;
    private javax.swing.JLabel jLabelCustomersAddress;
    private javax.swing.JLabel jLabelCustomersCredit;
    private javax.swing.JLabel jLabelCustomersDPI;
    private javax.swing.JLabel jLabelCustomersEmail;
    private javax.swing.JLabel jLabelCustomersMessage;
    private javax.swing.JLabel jLabelCustomersNIT;
    private javax.swing.JLabel jLabelCustomersName;
    private javax.swing.JLabel jLabelCustomersPhone;
    private javax.swing.JLabel jLabelDataBaseCustomersNIT;
    private javax.swing.JLabel jLabelDataBaseCustomersName;
    private javax.swing.JLabel jLabelDataBaseEmployeesCode;
    private javax.swing.JLabel jLabelDataBaseEmployeesName;
    private javax.swing.JLabel jLabelDataBaseProductsCode;
    private javax.swing.JLabel jLabelDataBaseProductsName;
    private javax.swing.JLabel jLabelDataBaseProductsStore;
    private javax.swing.JLabel jLabelDataBaseStoresCode;
    private javax.swing.JLabel jLabelDataBaseStoresName;
    private javax.swing.JLabel jLabelDeliveryAdvance;
    private javax.swing.JLabel jLabelDeliveryAdvancetNumber;
    private javax.swing.JLabel jLabelDeliveryCode;
    private javax.swing.JLabel jLabelDeliveryCreditUsed;
    private javax.swing.JLabel jLabelDeliveryCreditUsedNumber;
    private javax.swing.JLabel jLabelDeliveryCustomer;
    private javax.swing.JLabel jLabelDeliveryCustomerMessage;
    private javax.swing.JLabel jLabelDeliveryDate;
    private javax.swing.JLabel jLabelDeliveryDateArraived;
    private javax.swing.JLabel jLabelDeliveryDateMessage;
    private javax.swing.JLabel jLabelDeliveryMessage;
    private javax.swing.JLabel jLabelDeliveryPayment;
    private javax.swing.JLabel jLabelDeliveryPaymentNumber;
    private javax.swing.JLabel jLabelDeliveryProduct;
    private javax.swing.JLabel jLabelDeliveryProductMessage;
    private javax.swing.JLabel jLabelDeliveryQuantity;
    private javax.swing.JLabel jLabelDeliveryQuantityNumber;
    private javax.swing.JLabel jLabelDeliveryStore1;
    private javax.swing.JLabel jLabelDeliveryStore1Message;
    private javax.swing.JLabel jLabelDeliveryStore2;
    private javax.swing.JLabel jLabelDeliveryStore2Message;
    private javax.swing.JLabel jLabelEmployeesCode;
    private javax.swing.JLabel jLabelEmployeesDPI;
    private javax.swing.JLabel jLabelEmployeesMessage;
    private javax.swing.JLabel jLabelEmployeesName;
    private javax.swing.JLabel jLabelEmployeesPhone;
    private javax.swing.JLabel jLabelInfoBuyingsCustomer;
    private javax.swing.JLabel jLabelInfoLocalhost;
    private javax.swing.JLabel jLabelInfoNoSalesStore;
    private javax.swing.JLabel jLabelInfoOrdersCustomer;
    private javax.swing.JLabel jLabelInfoOrdersLateDate;
    private javax.swing.JLabel jLabelInfoPassword;
    private javax.swing.JLabel jLabelInfoTopSalesDate1;
    private javax.swing.JLabel jLabelInfoTopSalesDate2;
    private javax.swing.JLabel jLabelInfoTopSalesStore;
    private javax.swing.JLabel jLabelInfoTopSalesStoreDate1;
    private javax.swing.JLabel jLabelInfoTopSalesStoreDate2;
    private javax.swing.JLabel jLabelInfoUser;
    private javax.swing.JLabel jLabelOrdersAdvance;
    private javax.swing.JLabel jLabelOrdersCreditAvailable;
    private javax.swing.JLabel jLabelOrdersCreditAvailableNumber;
    private javax.swing.JLabel jLabelOrdersCustomer;
    private javax.swing.JLabel jLabelOrdersCustomerCredit;
    private javax.swing.JLabel jLabelOrdersDate;
    private javax.swing.JLabel jLabelOrdersMessage;
    private javax.swing.JLabel jLabelOrdersNewCredit;
    private javax.swing.JLabel jLabelOrdersNewCreditNumber;
    private javax.swing.JLabel jLabelOrdersPaymentDelivery;
    private javax.swing.JLabel jLabelOrdersPaymentDeliveryNumber;
    private javax.swing.JLabel jLabelOrdersPaymentTotal;
    private javax.swing.JLabel jLabelOrdersPaymentTotalNumber;
    private javax.swing.JLabel jLabelOrdersPrice;
    private javax.swing.JLabel jLabelOrdersPriceNumber;
    private javax.swing.JLabel jLabelOrdersProduct;
    private javax.swing.JLabel jLabelOrdersQuantity;
    private javax.swing.JLabel jLabelOrdersQuantityAvailable;
    private javax.swing.JLabel jLabelOrdersQuantityAvailableNumber;
    private javax.swing.JLabel jLabelOrdersReceivedAdvance;
    private javax.swing.JLabel jLabelOrdersReceivedAdvanceNumber;
    private javax.swing.JLabel jLabelOrdersReceivedCode;
    private javax.swing.JLabel jLabelOrdersReceivedCreditUsed;
    private javax.swing.JLabel jLabelOrdersReceivedCreditUsedNumber;
    private javax.swing.JLabel jLabelOrdersReceivedCustomer;
    private javax.swing.JLabel jLabelOrdersReceivedCustomerMessage;
    private javax.swing.JLabel jLabelOrdersReceivedDate;
    private javax.swing.JLabel jLabelOrdersReceivedDateArraived;
    private javax.swing.JLabel jLabelOrdersReceivedDateMessage;
    private javax.swing.JLabel jLabelOrdersReceivedMessage;
    private javax.swing.JLabel jLabelOrdersReceivedPayment;
    private javax.swing.JLabel jLabelOrdersReceivedPaymentNumber;
    private javax.swing.JLabel jLabelOrdersReceivedProduct;
    private javax.swing.JLabel jLabelOrdersReceivedProductMessage;
    private javax.swing.JLabel jLabelOrdersReceivedQuantity;
    private javax.swing.JLabel jLabelOrdersReceivedQuantityNumber;
    private javax.swing.JLabel jLabelOrdersReceivedStore1;
    private javax.swing.JLabel jLabelOrdersReceivedStore1Message;
    private javax.swing.JLabel jLabelOrdersReceivedStore2;
    private javax.swing.JLabel jLabelOrdersReceivedStore2Message;
    private javax.swing.JLabel jLabelOrdersStore1;
    private javax.swing.JLabel jLabelOrdersStore2;
    private javax.swing.JLabel jLabelProductsCode;
    private javax.swing.JLabel jLabelProductsDescription;
    private javax.swing.JLabel jLabelProductsMaker;
    private javax.swing.JLabel jLabelProductsMessage;
    private javax.swing.JLabel jLabelProductsName;
    private javax.swing.JLabel jLabelProductsPrice;
    private javax.swing.JLabel jLabelProductsQuantity;
    private javax.swing.JLabel jLabelProductsStore;
    private javax.swing.JLabel jLabelProductsWarranty;
    private javax.swing.JLabel jLabelSalesCredit;
    private javax.swing.JLabel jLabelSalesCreditAvailable;
    private javax.swing.JLabel jLabelSalesCreditAvailableNumber;
    private javax.swing.JLabel jLabelSalesCustomer;
    private javax.swing.JLabel jLabelSalesDate;
    private javax.swing.JLabel jLabelSalesMessage;
    private javax.swing.JLabel jLabelSalesPayment;
    private javax.swing.JLabel jLabelSalesPaymentNumber;
    private javax.swing.JLabel jLabelSalesPriceReview;
    private javax.swing.JLabel jLabelSalesPriceReviewNumber;
    private javax.swing.JLabel jLabelSalesProduct;
    private javax.swing.JLabel jLabelSalesQuantity;
    private javax.swing.JLabel jLabelSalesQuantityAvailable;
    private javax.swing.JLabel jLabelSalesQuantityAvailableNumber;
    private javax.swing.JLabel jLabelSalesStore;
    private javax.swing.JLabel jLabelStoresAddress;
    private javax.swing.JLabel jLabelStoresCode;
    private javax.swing.JLabel jLabelStoresEmail;
    private javax.swing.JLabel jLabelStoresHours;
    private javax.swing.JLabel jLabelStoresMessage;
    private javax.swing.JLabel jLabelStoresName;
    private javax.swing.JLabel jLabelStoresPhone1;
    private javax.swing.JLabel jLabelStoresPhone2;
    private javax.swing.JLabel jLabelTimeMessage;
    private javax.swing.JLabel jLabelTimeStore1;
    private javax.swing.JLabel jLabelTimeStore2;
    private javax.swing.JLabel jLabelTimeTime;
    private javax.swing.JPanel jPanelCustomers;
    private javax.swing.JPanel jPanelDataBase;
    private javax.swing.JPanel jPanelDelivery;
    private javax.swing.JPanel jPanelEmployees;
    private javax.swing.JPanel jPanelInfo;
    private javax.swing.JPanel jPanelIntro;
    private javax.swing.JPanel jPanelOrders;
    private javax.swing.JPanel jPanelOrdersReceived;
    private javax.swing.JPanel jPanelProducts;
    private javax.swing.JPanel jPanelQuery;
    private javax.swing.JPanel jPanelSales;
    private javax.swing.JPanel jPanelStores;
    private javax.swing.JPanel jPanelTextAreainfo;
    private javax.swing.JPanel jPanelTime;
    private javax.swing.JPasswordField jPasswordFieldInfoPassword;
    private javax.swing.JScrollPane jScrollPaneDataBase;
    private javax.swing.JScrollPane jScrollPaneInfo;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparatorDataBase1;
    private javax.swing.JSeparator jSeparatorDataBase2;
    private javax.swing.JSeparator jSeparatorDataBase3;
    private javax.swing.JSeparator jSeparatorDataBase4;
    private javax.swing.JSeparator jSeparatorDataBase5;
    private javax.swing.JTabbedPane jTabbedPaneDataBase;
    private javax.swing.JTabbedPane jTabbedPaneIntro;
    private javax.swing.JTabbedPane jTabbedPaneMain;
    private javax.swing.JTextArea jTextAreaDataBase;
    private javax.swing.JTextArea jTextAreaInfo;
    private javax.swing.JTextField jTextFieldCustomersAddress;
    private javax.swing.JTextField jTextFieldCustomersCredit;
    private javax.swing.JTextField jTextFieldCustomersDPI;
    private javax.swing.JTextField jTextFieldCustomersEmail;
    private javax.swing.JTextField jTextFieldCustomersNIT;
    private javax.swing.JTextField jTextFieldCustomersName;
    private javax.swing.JTextField jTextFieldCustomersPhone;
    private javax.swing.JTextField jTextFieldDataBaseCustomersNIT;
    private javax.swing.JTextField jTextFieldDataBaseCustomersName;
    private javax.swing.JTextField jTextFieldDataBaseEmployeesCode;
    private javax.swing.JTextField jTextFieldDataBaseEmployeesName;
    private javax.swing.JTextField jTextFieldDataBaseProductsCode;
    private javax.swing.JTextField jTextFieldDataBaseProductsName;
    private javax.swing.JTextField jTextFieldDataBaseProductsStore;
    private javax.swing.JTextField jTextFieldDataBaseStoresCode;
    private javax.swing.JTextField jTextFieldDataBaseStoresName;
    private javax.swing.JTextField jTextFieldEmployeesCode;
    private javax.swing.JTextField jTextFieldEmployeesDPI;
    private javax.swing.JTextField jTextFieldEmployeesName;
    private javax.swing.JTextField jTextFieldEmployeesPhone;
    private javax.swing.JTextField jTextFieldInfoLocalhost;
    private javax.swing.JTextField jTextFieldInfoUser;
    private javax.swing.JTextField jTextFieldOrdersAdvance;
    private javax.swing.JTextField jTextFieldOrdersCustomerCredit;
    private javax.swing.JTextField jTextFieldOrdersQuantity;
    private javax.swing.JTextField jTextFieldProductsCode;
    private javax.swing.JTextField jTextFieldProductsDescription;
    private javax.swing.JTextField jTextFieldProductsMaker;
    private javax.swing.JTextField jTextFieldProductsName;
    private javax.swing.JTextField jTextFieldProductsPrice;
    private javax.swing.JTextField jTextFieldProductsQuantity;
    private javax.swing.JTextField jTextFieldProductsWarranty;
    private javax.swing.JTextField jTextFieldSalesCredit;
    private javax.swing.JTextField jTextFieldSalesQuantity;
    private javax.swing.JTextField jTextFieldStoresAddress;
    private javax.swing.JTextField jTextFieldStoresCode;
    private javax.swing.JTextField jTextFieldStoresEmail;
    private javax.swing.JTextField jTextFieldStoresHours;
    private javax.swing.JTextField jTextFieldStoresName;
    private javax.swing.JTextField jTextFieldStoresPhone1;
    private javax.swing.JTextField jTextFieldStoresPhone2;
    private javax.swing.JTextField jTextFieldTimeTime;
    // End of variables declaration//GEN-END:variables

    //****************************************************
    
    /***
     * To load a file with new information to be inserted in database
     * @param fileName 
     */
    
    public void loadFile(String fileName) {
        Scanner stdIn = new Scanner(System.in);
        Scanner fileIn;
        String line;
        try
        {
            //System.out.print("Introduzca el nombre del archivo: ");
            fileIn = new Scanner(new FileReader(fileName));
            while (fileIn.hasNextLine())
            {
                //To process each line of file
                line = fileIn.nextLine();
                processLine(line);
                System.out.println(line);
            }
            fileIn.close();
        }
        catch (FileNotFoundException e)
        {
            System.out.println("Error: " + e.getMessage());
        }        
    }

    //****************************************************
    
    /***
     * To process every line in the file opened
     * @param line 
     */
    
    public void processLine(String line) {
        char[] lineArray = line.toCharArray();
        char[] wordArray;
        ArrayList<Character> wordTemp = new ArrayList<>();
        String word = "";
        boolean start = false ;
        int count = 0;
        
        if ( line.startsWith("TIENDA") ) {
            Store store = new Store();
                    
            for (int i = 0; i < lineArray.length; i++) {
                if ( lineArray[i] == ',' ) {
                    count++;
                    start = false;
                    continue;
                }
                if ( count == 1 ) {
                    if ( lineArray[i] == ' ' ) {
                        start = true;
                        continue;
                    }
                    if ( start == true ) {
                        wordTemp.add(lineArray[i]);
                        if ( lineArray[i+1] == ',' ) {
                            wordArray = new char[wordTemp.size()];
                            for (int j = 0; j < wordArray.length; j++) {
                                wordArray[j] = wordTemp.get(j);
                            }
                            store.name = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                            wordTemp.clear();
                            System.out.println(store.name);
                        }
                    }
                }
                if ( count == 2 ) {
                    if ( lineArray[i] == ' ' ) {
                        start = true;
                        continue;
                    }
                    if ( start == true ) {
                        wordTemp.add(lineArray[i]);
                        if ( lineArray[i+1] == ',' ) {
                            wordArray = new char[wordTemp.size()];
                            for (int j = 0; j < wordArray.length; j++) {
                                wordArray[j] = wordTemp.get(j);
                            }
                            store.address = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                            wordTemp.clear();
                            System.out.println(store.address);
                        }
                    }
                }
                if ( count == 3 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        store.code = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(store.code);
                    }
                } 
                if ( count == 4 ) {
                    wordTemp.add(lineArray[i]);
                    if ( i == lineArray.length - 1 ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        store.phone1 = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(store.phone1);
                    }
                }                
            }
            
            // Adds a new store object
            stores.add(store);
            
            //To upload data to the table
            try {              
                Statement st = connection.createStatement();
                st.executeUpdate("REPLACE INTO `200130586_ipc2_proyecto1`.`store` (`name`,`address`,`code`,`phone1`) VALUES ('" + store.name + "','" + store.address + "','" + store.code + "','" + store.phone1 + "');");
                st.close();            
            }
            catch (Exception e){
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            }             
            
        }
        
        if ( line.startsWith("EMPLEADO") ) {
            Employee employee = new Employee();
                    
            for (int i = 0; i < lineArray.length; i++) {
                if ( lineArray[i] == ',' ) {
                    count++;
                    start = false;
                    continue;
                }
                if ( count == 1 ) {
                    if ( lineArray[i] == ' ' ) {
                        start = true;
                        continue;
                    }
                    if ( start == true ) {
                        wordTemp.add(lineArray[i]);
                        if ( lineArray[i+1] == ',' ) {
                            wordArray = new char[wordTemp.size()];
                            for (int j = 0; j < wordArray.length; j++) {
                                wordArray[j] = wordTemp.get(j);
                            }
                            employee.name = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                            wordTemp.clear();
                            System.out.println(employee.name);
                        }
                    }
                }
                if ( count == 2 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        employee.code = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(employee.code);
                    }
                }
                if ( count == 3 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        employee.phone = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(employee.phone);
                    }
                } 
                if ( count == 4 ) {
                    wordTemp.add(lineArray[i]);
                    if ( i == lineArray.length - 1 ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        employee.DPI = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(employee.DPI);
                    }
                }                  
            }  
            
            // Adds a new employe object
            employees.add(employee);
            
            //To upload data to the table
            try {              
                Statement st = connection.createStatement();
                st.executeUpdate("REPLACE INTO `200130586_ipc2_proyecto1`.`employee` (`name`,`code`,`phone`,`DPI`) VALUES ('" + employee.name + "','" + employee.code + "','" + employee.phone + "','" + employee.DPI + "');");
                st.close();            
            }
            catch (Exception e){
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            }             
                        
        }        
        
        if ( line.startsWith("TIEMPO") ) {
            Time time = new Time();
                    
            for (int i = 0; i < lineArray.length; i++) {
                if ( lineArray[i] == ',' ) {
                    count++;
                    start = false;
                    continue;
                }               
                if ( count == 1 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        time.store1 = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(time.store1);
                    }
                } 
                if ( count == 2 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        time.store2 = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(time.store2);
                    }
                } 
                if ( count == 3 ) {
                    wordTemp.add(lineArray[i]);
                    if ( i == lineArray.length - 1 ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        time.time = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(time.time);
                    }
                }   
            }
            
            // Adds a new time object
            times.add(time);
            
            //To upload data to the table
            try {              
                Statement st = connection.createStatement();
                st.executeUpdate("REPLACE INTO `200130586_ipc2_proyecto1`.`time` (`code`,`store1`,`store2`,`time`) VALUES ('" + time.store1 + time.store2 + "','" + time.store1 + "','" + time.store2 + "','" + time.time + "');");
                st.executeUpdate("REPLACE INTO `200130586_ipc2_proyecto1`.`time` (`code`,`store1`,`store2`,`time`) VALUES ('" + time.store2 + time.store1 + "','" + time.store2 + "','" + time.store1 + "','" + time.time + "');");
                st.close();            
            }
            catch (Exception e){
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            }             
                        
        }
        
        if ( line.startsWith("PRODUCTO") ) {
            Product product = new Product();
                    
            for (int i = 0; i < lineArray.length; i++) {
                if ( lineArray[i] == ',' ) {
                    count++;
                    start = false;
                    continue;
                }
                if ( count == 1 ) {
                    if ( lineArray[i] == ' ' ) {
                        start = true;
                        continue;
                    }
                    if ( start == true ) {
                        wordTemp.add(lineArray[i]);
                        if ( lineArray[i+1] == ',' ) {
                            wordArray = new char[wordTemp.size()];
                            for (int j = 0; j < wordArray.length; j++) {
                                wordArray[j] = wordTemp.get(j);
                            }
                            product.name = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                            wordTemp.clear();
                            System.out.println(product.name);
                        }
                    }
                } 
                if ( count == 2 ) {
                    if ( lineArray[i] == ' ' ) {
                        start = true;
                        continue;
                    }
                    if ( start == true ) {
                        wordTemp.add(lineArray[i]);
                        if ( lineArray[i+1] == ',' ) {
                            wordArray = new char[wordTemp.size()];
                            for (int j = 0; j < wordArray.length; j++) {
                                wordArray[j] = wordTemp.get(j);
                            }
                            product.maker = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                            wordTemp.clear();
                            System.out.println(product.maker);
                        }
                    }
                }
                if ( count == 3 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        product.code = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(product.code);
                    }
                }     
                if ( count == 4 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        product.quantity = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(product.quantity);
                    }
                }              
                if ( count == 5 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        product.price = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(product.price);
                    }
                }                 
                if ( count == 6 ) {
                    wordTemp.add(lineArray[i]);
                    if ( i == lineArray.length - 1 ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        product.store = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(product.store);
                    }
                }   
            } 
            
            // Adds a new product object
            products.add(product);
            
            //To upload data to the table
            try {              
                Statement st = connection.createStatement();
                
                // Introduces products
                st.executeUpdate("REPLACE INTO `200130586_ipc2_proyecto1`.`product` (`name`,`maker`,`code`,`quantity`,`price`,`store`) VALUES ('" + product.name + "','" + product.maker + "','" + product.code + "','" + product.quantity + "','" + product.price + "','" + product.store + "');");

                // Introduces products sold with 0 quantity
                st.executeUpdate("REPLACE INTO `200130586_ipc2_proyecto1`.`sold` (`code`,`product`,`store`,`quantity`) VALUES ('" + product.code + product.store + "','" + product.code + "','" + product.store + "','0');");                

                st.close();            
            }
            catch (Exception e){
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            }             
                        
        }
        
        if ( line.startsWith("CLIENTE") ) {
            Customer customer = new Customer();
                    
            for (int i = 0; i < lineArray.length; i++) {
                if ( lineArray[i] == ',' ) {
                    count++;
                    start = false;
                    continue;
                }
                if ( count == 1 ) {
                    if ( lineArray[i] == ' ' ) {
                        start = true;
                        continue;
                    }
                    if ( start == true ) {
                        wordTemp.add(lineArray[i]);
                        if ( lineArray[i+1] == ',' ) {
                            wordArray = new char[wordTemp.size()];
                            for (int j = 0; j < wordArray.length; j++) {
                                wordArray[j] = wordTemp.get(j);
                            }
                            customer.name = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                            wordTemp.clear();
                            System.out.println(customer.name);
                        }
                    }
                }
                if ( count == 2 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        customer.NIT = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(customer.NIT);
                    }
                }
                if ( count == 3 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        customer.phone = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(customer.phone);
                    }
                } 
                if ( count == 4 ) {
                    wordTemp.add(lineArray[i]);
                    if ( i == lineArray.length - 1 ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        customer.credit = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(customer.credit);
                    }
                }                  
            }
            
            // Adds a new customer object
            customers.add(customer);
            
            //To upload data to the table
            try {              
                Statement st = connection.createStatement();
                st.executeUpdate("REPLACE INTO `200130586_ipc2_proyecto1`.`customer` (`name`,`NIT`,`phone`,`credit`) VALUES ('" + customer.name + "','" + customer.NIT + "','" + customer.phone + "','" + customer.credit + "');");
                st.close();            
            }
            catch (Exception e){
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            }             
                        
        }
        
        if ( line.startsWith("PEDIDO") ) {
            Order order = new Order();
                    
            for (int i = 0; i < lineArray.length; i++) {
                if ( lineArray[i] == ',' ) {
                    count++;
                    start = false;
                    continue;
                }
                if ( count == 1 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        order.code = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(order.code);
                    }
                }
                if ( count == 2 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        order.store1 = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(order.store1);
                    }
                }
                if ( count == 3 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        order.store2 = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(order.store2);
                    }
                } 
                if ( count == 4 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        order.date = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(order.date);
                    }
                }
                if ( count == 5 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        order.customer = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(order.customer);
                    }
                }  
                if ( count == 6 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        order.product = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(order.product);
                    }
                }
                if ( count == 7 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        order.quantity = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(order.quantity);
                    }                    
                }              
                if ( count == 8 ) {
                    wordTemp.add(lineArray[i]);
                    if ( lineArray[i+1] == ',' ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        order.payment = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(order.payment);
                    }  
                }
                if ( count == 9 ) {
                    wordTemp.add(lineArray[i]);
                    if ( i == lineArray.length - 1 ) {
                        wordArray = new char[wordTemp.size()];
                        for (int j = 0; j < wordArray.length; j++) {
                            wordArray[j] = wordTemp.get(j);
                        }
                        order.advance = Arrays.toString(wordArray).replaceAll("\\[|\\]", "").replaceAll(", ","");
                        wordTemp.clear();
                        System.out.println(order.advance);
                    }
                }                  
            }
            
            // Adds a new order object
            orders.add(order);
            
            //To upload data to the table
            try {              
                Statement st = connection.createStatement();
                st.executeUpdate("REPLACE INTO `200130586_ipc2_proyecto1`.`order` (`code`,`store1`,`store2`,`date`,`customer`,`product`,`quantity`,`payment`,`advance`) VALUES ('" + order.code + "','" + order.store1 + "','" + order.store2 + "','" + order.date + "','" + order.customer + "','" + order.product + "','" + order.quantity + "','" + order.payment + "','" + order.advance + "');");
                st.close();            
            }
            catch (Exception e){
                System.err.println("Exception!");
                System.err.println(e.getMessage());
            }             
                                    
        }
    }
    
    //****************************************************    

    /***
     * To export the report to an HTML file readable by any web browser
     */
    
    public void exportHTML() {
        PrintWriter fileOut; // conexión al archivo HTML

        try {   
            //***********************
            //This is the FileChooser section
            final JFileChooser SaveAs = new JFileChooser();
            SaveAs.setApproveButtonText("Save");
            int actionDialog = SaveAs.showOpenDialog(this);
            if (actionDialog != JFileChooser.APPROVE_OPTION) {
               return;
            }

            File fileName = new File(SaveAs.getSelectedFile() + ".html"); 
            
            //************************
            
            //fileOut = new PrintWriter("Reporte_Intelaf_Empleados.html");
            fileOut = new PrintWriter(fileName);

            // Write the top of the HTML page.
            fileOut.println("<!DOCTYPE html>");
            fileOut.println("<html>");
            fileOut.println("<head>");
            fileOut.println("<title>" + "Reporte Intelaf Empleados" + "</title>");
            fileOut.println("</head>");
            fileOut.println("<body>");
            fileOut.println("<h1>" + "Reporte Intelaf Empleados" + "</h1>");

            //If line is empty
            //fileOut.println("<p>");
            //To print each line use
            //fileOut.println("Some string")
            
            for (String i:textLines) {
                fileOut.println("<p>");
                fileOut.println(i);
                fileOut.println("</p>");
            }
            
            fileOut.println("<p>");
            
            
            // Write ending HTML code
            fileOut.println("</body>");
            fileOut.println("</html>");

            fileOut.close();
        }
        catch (FileNotFoundException e)
        {
            System.out.println("Error: " + e.getMessage());
        }  
    }
    
    //****************************************************       
    
    /***
     * To print report information on screen
     * @param store prints information about stores
     * @param employee prints information about employees
     * @param time prints information about time
     * @param product prints information about product
     * @param customer prints information about customer
     * @param order prints information about  orders
     * @param orderReceived prints information about orders received
     * @param sale prints information about sales
     * @param delivery prints information about delivery
     */
    
    public void printOnScreenInfo(String title,boolean store, boolean employee, boolean time, boolean product, boolean customer, boolean order, boolean orderReceived, boolean sale, boolean delivery, boolean sold) {
        // Here we prints the result on screen
        jTextAreaInfo.setText("");
        textLines.clear();
        
        // Some expressive title
        jTextAreaInfo.append("\n******************************************");
        jTextAreaInfo.append("\n******************************************");
        textLines.add("");
        textLines.add("******************************************");
        textLines.add("******************************************");

        jTextAreaInfo.append("\n" + title);
        textLines.add(title);        

        if ( store == true ) {

            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < stores.size(); i++) {
                jTextAreaInfo.append("\nTIENDA " + (i + 1) );
                jTextAreaInfo.append("\nNombre = " + stores.get(i).name + "\nDirección = " + stores.get(i).address + "\nCódigo = " + stores.get(i).code + "\nTeléfono1 = " + stores.get(i).phone1 + "\nTeléfono2 = " + stores.get(i).phone2 + "\ne-mail = " + stores.get(i).email + "\nHoras = " + stores.get(i).hours);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("TIENDA " + (i + 1));
                textLines.add("Nombre = " + stores.get(i).name);
                textLines.add("Direccion = " + stores.get(i).address);
                textLines.add("Codigo = " + stores.get(i).code);
                textLines.add("Telefono1 = " + stores.get(i).phone1);
                textLines.add("Telefono2 = " + stores.get(i).phone2);
                textLines.add("e-mail = " + stores.get(i).email);
                textLines.add("Horas = " + stores.get(i).hours);
            }
        }

        if ( employee == true ) {

            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < employees.size(); i++) {
                jTextAreaInfo.append("\nEMPLEADO " + (i + 1) );
                jTextAreaInfo.append("\nNombre = " + employees.get(i).name + "\nCódigo = " + employees.get(i).code + "\nTeléfono = " + employees.get(i).phone + "\nDPI = " + employees.get(i).DPI);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("EMPLEADO " + (i + 1));
                textLines.add("Nombre = " + employees.get(i).name);
                textLines.add("Codigo = " + employees.get(i).code);
                textLines.add("Telefono = " + employees.get(i).phone);
                textLines.add("DPI = " + employees.get(i).DPI); 
                textLines.add("*******");
            }   
        }

        if ( time == true ) {

            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < times.size(); i++) {
                jTextAreaInfo.append("\nTIEMPO " + (i + 1) );
                jTextAreaInfo.append("\nCódigo = " + times.get(i).code + "\nTienda 1 = " + times.get(i).store1 + "\nTienda 2 = " + times.get(i).store2 + "\nTiempo = " + times.get(i).time);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("TIEMPO " + (i + 1));
                textLines.add("Codigo = " + times.get(i).code);
                textLines.add("Tienda 1 = " + times.get(i).store1);
                textLines.add("Tienda 2 = " + times.get(i).store2);
                textLines.add("Tiempo = " + times.get(i).time); 
                textLines.add("*******");                
            }  
        }

        if ( product == true ) {

            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < products.size(); i++) {
                jTextAreaInfo.append("\nPRODUCTO " + (i + 1) );
                jTextAreaInfo.append("\nNombre = " + products.get(i).name + "\nFabricante = " + products.get(i).maker + "\nCódigo = " + products.get(i).code + "\nCantidad = " + products.get(i).quantity + "\nPrecio = " + products.get(i).price + "\nTienda = " + products.get(i).store + "\nDescripción = " + products.get(i).description  + "\nGarantía = " + products.get(i).warranty);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("PRODUCTO " + (i + 1));
                textLines.add("Nombre = " + products.get(i).name);
                textLines.add("Fabricante = " + products.get(i).maker);
                textLines.add("Codigo = " + products.get(i).code);
                textLines.add("Cantidad = " + products.get(i).quantity); 
                textLines.add("Precio = " + products.get(i).price);
                textLines.add("Tienda = " + products.get(i).store);
                textLines.add("Descripcion = " + products.get(i).description);
                textLines.add("Garantia = " + products.get(i).warranty); 
                textLines.add("*******");
            }    
        }

        if ( customer == true ) {

            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < customers.size(); i++) {
                jTextAreaInfo.append("\nCLIENTE " + (i + 1) );
                jTextAreaInfo.append("\nNombre = " + customers.get(i).name + "\nTeléfono = " + customers.get(i).phone + "\nNIT = " + customers.get(i).NIT + "\nDPI = " + customers.get(i).DPI + "\nCrédito = " + customers.get(i).credit + "\ne-mail = " + customers.get(i).email + "\nDirección = " + customers.get(i).address);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("CLIENTE " + (i + 1));
                textLines.add("Nombre = " + customers.get(i).name);
                textLines.add("Telefono = " + customers.get(i).phone);
                textLines.add("NIT = " + customers.get(i).NIT);
                textLines.add("DPI = " + customers.get(i).DPI);
                textLines.add("Credito = " + customers.get(i).credit);
                textLines.add("e-mail = " + customers.get(i).email);
                textLines.add("Direccion = " + customers.get(i).address); 
                textLines.add("*******");
            }  
        }

        if ( order == true ) {

            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < orders.size(); i++) {
                jTextAreaInfo.append("\nPEDIDO " + (i + 1) );
                jTextAreaInfo.append("\nCódigo = " + orders.get(i).code + "\nTienda 1 = " + orders.get(i).store1 + "\nTienda 2 = " + orders.get(i).store2 + "\nFecha = " + orders.get(i).date + "\nCliente = " + orders.get(i).customer + "\nProducto = " + orders.get(i).product + "\nCantidad = " + orders.get(i).quantity + "\nPago = " + orders.get(i).payment + "\nAnticipo = " + orders.get(i).advance + "\nCrédito Utilizado = " + orders.get(i).creditUsed);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("PEDIDO " + (i + 1));
                textLines.add("Codigo = " + orders.get(i).code);
                textLines.add("Tienda 1 = " + orders.get(i).store1);
                textLines.add("Tienda 2 = " + orders.get(i).store2);
                textLines.add("Fecha = " + orders.get(i).date); 
                textLines.add("Cliente = " + orders.get(i).customer);
                textLines.add("Producto = " + orders.get(i).product);
                textLines.add("Cantidad = " + orders.get(i).quantity);
                textLines.add("Pago = " + orders.get(i).payment); 
                textLines.add("Anticipo = " + orders.get(i).advance); 
                textLines.add("credito Utilizado = " + orders.get(i).creditUsed); 
                textLines.add("*******");
            }
        }

        if ( orderReceived == true ) {

            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < ordersReceived.size(); i++) {
                jTextAreaInfo.append("\nPEDIDO RECIBIDO EN TIENDA " + (i + 1) );
                jTextAreaInfo.append("\nCódigo = " + ordersReceived.get(i).code + "\nTienda 1 = " + ordersReceived.get(i).store1 + "\nTienda 2 = " + ordersReceived.get(i).store2 + "\nFecha = " + ordersReceived.get(i).date + "\nCliente = " + ordersReceived.get(i).customer + "\nProducto = " + ordersReceived.get(i).product + "\nCantidad = " + ordersReceived.get(i).quantity + "\nPago = " + ordersReceived.get(i).payment + "\nAnticipo = " + ordersReceived.get(i).advance + "\nCrédito Utilizado = " + ordersReceived.get(i).creditUsed);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("PEDIDO RECIBIDO " + (i + 1));
                textLines.add("Codigo = " + ordersReceived.get(i).code);
                textLines.add("Tienda 1 = " + ordersReceived.get(i).store1);
                textLines.add("Tienda 2 = " + ordersReceived.get(i).store2);
                textLines.add("Fecha = " + ordersReceived.get(i).date); 
                textLines.add("Cliente = " + ordersReceived.get(i).customer);
                textLines.add("Producto = " + ordersReceived.get(i).product);
                textLines.add("Cantidad = " + ordersReceived.get(i).quantity);
                textLines.add("Pago = " + ordersReceived.get(i).payment); 
                textLines.add("Anticipo = " + ordersReceived.get(i).advance); 
                textLines.add("Credito Utilizado = " + ordersReceived.get(i).creditUsed);
                textLines.add("*******");
            }  
        }

        if ( sale == true ) {

            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < sales.size(); i++) {
                jTextAreaInfo.append("\nVENTA " + (i + 1) );
                jTextAreaInfo.append("\nCódigo = " + sales.get(i).code + "\nTienda 1 = " + sales.get(i).store + "\nFecha = " + sales.get(i).date + "\nCliente = " + sales.get(i).customer + "\nProducto = " + sales.get(i).product + "\nCantidad = " + sales.get(i).quantity + "\nPago = " + sales.get(i).payment + "\nCrédito Utilizado = " + sales.get(i).creditUsed);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("VENTA " + (i + 1));
                textLines.add("Codigo = " + sales.get(i).code);
                textLines.add("Tienda 1 = " + sales.get(i).store);
                textLines.add("Fecha = " + sales.get(i).date);
                textLines.add("Cliente = " + sales.get(i).customer); 
                textLines.add("Producto = " + sales.get(i).product);
                textLines.add("Cantidad = " + sales.get(i).quantity);
                textLines.add("Pago = " + sales.get(i).payment);
                textLines.add("Credito Utilizado = " + sales.get(i).creditUsed);
                textLines.add("*******");
            } 
        }

        if ( delivery == true ) {

            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < deliveries.size(); i++) {
                jTextAreaInfo.append("\nENTREGA " + (i + 1) );
                jTextAreaInfo.append("\nCódigo = " + deliveries.get(i).code + "\nTienda 1 = " + deliveries.get(i).store1 + "\nTienda 2 = " + deliveries.get(i).store2 + "\nFecha = " + deliveries.get(i).date + "\nCliente = " + deliveries.get(i).customer + "\nProducto = " + deliveries.get(i).product + "\nCantidad = " + deliveries.get(i).quantity + "\nPago = " + deliveries.get(i).payment + "\nAnticipo = " + deliveries.get(i).advance + "\nCrédito Utilizado = " + deliveries.get(i).creditUsed);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("ENTREGA " + (i + 1));
                textLines.add("Codigo = " + deliveries.get(i).code);
                textLines.add("Tienda 1 = " + deliveries.get(i).store1);
                textLines.add("Tienda 2 = " + deliveries.get(i).store2);
                textLines.add("Fecha = " + deliveries.get(i).date);
                textLines.add("Cliente = " + deliveries.get(i).customer);
                textLines.add("Producto = " + deliveries.get(i).product);
                textLines.add("Cantidad = " + deliveries.get(i).quantity);
                textLines.add("Pago = " + deliveries.get(i).payment); 
                textLines.add("Anticipo = " + deliveries.get(i).advance); 
                textLines.add("Credito Utiizado = " + deliveries.get(i).creditUsed); 
                textLines.add("*******");
            }      
        }
        
        if ( sold == true ) {

            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < solds.size(); i++) {
                jTextAreaInfo.append("\nPRODUCTOS VENDIDOS " + (i + 1) );
                jTextAreaInfo.append("\nCódigo = " + solds.get(i).code + "\nProducto = " + solds.get(i).product + "\nTienda = " + solds.get(i).store + "\nCantidad = " + solds.get(i).quantity);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("PRODUCTOS VENDIDOS " + (i + 1));
                textLines.add("Codigo = " + solds.get(i).code);
                textLines.add("Producto = " + solds.get(i).product);
                textLines.add("Tienda = " + solds.get(i).store);
                textLines.add("Cantidad = " + solds.get(i).quantity);
                textLines.add("*******");
            }      
        }        
    }
    
    //****************************************************       
    
    /***
     * To print report information on screen
     * @param store prints information about stores
     * @param employee prints information about employees
     * @param time prints information about time between stores
     * @param product prints information about products
     * @param customer prints information about customers
     * @param order prints information about orders
     * @param orderReceived prints information about orders received
     * @param sale prints information about sales
     * @param delivery prints information about deliveries
     */
    
    public void printOnScreenDataBase(String title, boolean store, boolean employee, boolean time, boolean product, boolean customer, boolean order, boolean orderReceived, boolean sale, boolean delivery, boolean sold) {
        // Here we prints the result on screen
        jTextAreaDataBase.setText("");
        
        // Some expressive title
        jTextAreaDataBase.append("\n******************************************");
        jTextAreaDataBase.append("\n******************************************");
        textLines.add("");
        textLines.add("******************************************");
        textLines.add("******************************************");

        jTextAreaDataBase.append("\n" + title);
        textLines.add(title);          

        if ( store == true ) {

            jTextAreaDataBase.append("\n******************************************");
            jTextAreaDataBase.append("\n******************************************");

            for (int i = 0; i < stores.size(); i++) {
                jTextAreaDataBase.append("\nTIENDA " + (i + 1) );
                jTextAreaDataBase.append("\nNombre = " + stores.get(i).name + "\nDirección = " + stores.get(i).address + "\nCódigo = " + stores.get(i).code + "\nTeléfono1 = " + stores.get(i).phone1 + "\nTeléfono2 = " + stores.get(i).phone2 + "\ne-mail = " + stores.get(i).email + "\nHoras = " + stores.get(i).hours);
                jTextAreaDataBase.append("\n");
            }
        }

        if ( employee == true ) {

            jTextAreaDataBase.append("\n******************************************");
            jTextAreaDataBase.append("\n******************************************");

            for (int i = 0; i < employees.size(); i++) {
                jTextAreaDataBase.append("\nEMPLEADO " + (i + 1) );
                jTextAreaDataBase.append("\nNombre = " + employees.get(i).name + "\nCódigo = " + employees.get(i).code + "\nTeléfono = " + employees.get(i).phone + "\nDPI = " + employees.get(i).DPI);
                jTextAreaDataBase.append("\n");
            }   
        }

        if ( time == true ) {

            jTextAreaDataBase.append("\n******************************************");
            jTextAreaDataBase.append("\n******************************************");

            for (int i = 0; i < times.size(); i++) {
                jTextAreaDataBase.append("\nTIEMPO " + (i + 1) );
                jTextAreaDataBase.append("\nCódigo = " + times.get(i).code + "\nTienda 1 = " + times.get(i).store1 + "\nTienda 2 = " + times.get(i).store2 + "\nTiempo = " + times.get(i).time);
                jTextAreaDataBase.append("\n");              
            }  
        }

        if ( product == true ) {

            jTextAreaDataBase.append("\n******************************************");
            jTextAreaDataBase.append("\n******************************************");

            for (int i = 0; i < products.size(); i++) {
                jTextAreaDataBase.append("\nPRODUCTO " + (i + 1) );
                jTextAreaDataBase.append("\nNombre = " + products.get(i).name + "\nFabricante = " + products.get(i).maker + "\nCódigo = " + products.get(i).code + "\nCantidad = " + products.get(i).quantity + "\nPrecio = " + products.get(i).price + "\nTienda = " + products.get(i).store + "\nDescripción = " + products.get(i).description  + "\nGarantía = " + products.get(i).warranty);
                jTextAreaDataBase.append("\n");
            }    
        }

        if ( customer == true ) {

            jTextAreaDataBase.append("\n******************************************");
            jTextAreaDataBase.append("\n******************************************");

            for (int i = 0; i < customers.size(); i++) {
                jTextAreaDataBase.append("\nCLIENTE " + (i + 1) );
                jTextAreaDataBase.append("\nNombre = " + customers.get(i).name + "\nTeléfono = " + customers.get(i).phone + "\nNIT = " + customers.get(i).NIT + "\nDPI = " + customers.get(i).DPI + "\nCrédito = " + customers.get(i).credit + "\ne-mail = " + customers.get(i).email + "\nDirección = " + customers.get(i).address);
                jTextAreaDataBase.append("\n");
            }  
        }

        if ( order == true ) {

            jTextAreaDataBase.append("\n******************************************");
            jTextAreaDataBase.append("\n******************************************");

            for (int i = 0; i < orders.size(); i++) {
                jTextAreaDataBase.append("\nPEDIDO " + (i + 1) );
                jTextAreaDataBase.append("\nCódigo = " + orders.get(i).code + "\nTienda 1 = " + orders.get(i).store1 + "\nTienda 2 = " + orders.get(i).store2 + "\nFecha = " + orders.get(i).date + "\nCliente = " + orders.get(i).customer + "\nProducto = " + orders.get(i).product + "\nCantidad = " + orders.get(i).quantity + "\nPago = " + orders.get(i).payment + "\nAnticipo = " + orders.get(i).advance + "\nCrédito Utilizado = " + orders.get(i).creditUsed);
                jTextAreaDataBase.append("\n");
            }
        }

        if ( orderReceived == true ) {

            jTextAreaDataBase.append("\n******************************************");
            jTextAreaDataBase.append("\n******************************************");

            for (int i = 0; i < ordersReceived.size(); i++) {
                jTextAreaDataBase.append("\nPEDIDO RECIBIDO EN TIENDA " + (i + 1) );
                jTextAreaDataBase.append("\nCódigo = " + ordersReceived.get(i).code + "\nTienda 1 = " + ordersReceived.get(i).store1 + "\nTienda 2 = " + ordersReceived.get(i).store2 + "\nFecha = " + ordersReceived.get(i).date + "\nCliente = " + ordersReceived.get(i).customer + "\nProducto = " + ordersReceived.get(i).product + "\nCantidad = " + ordersReceived.get(i).quantity + "\nPago = " + ordersReceived.get(i).payment + "\nAnticipo = " + ordersReceived.get(i).advance + "\nCrédito Utilizado = " + ordersReceived.get(i).creditUsed);
                jTextAreaDataBase.append("\n");
            }  
        }

        if ( sale == true ) {

            jTextAreaDataBase.append("\n******************************************");
            jTextAreaDataBase.append("\n******************************************");

            for (int i = 0; i < sales.size(); i++) {
                jTextAreaDataBase.append("\nVENTA " + (i + 1) );
                jTextAreaDataBase.append("\nCódigo = " + sales.get(i).code + "\nTienda 1 = " + sales.get(i).store + "\nFecha = " + sales.get(i).date + "\nCliente = " + sales.get(i).customer + "\nProducto = " + sales.get(i).product + "\nCantidad = " + sales.get(i).quantity + "\nPago = " + sales.get(i).payment + "\nCrédito Utilizado = " + sales.get(i).creditUsed);
                jTextAreaDataBase.append("\n");
            } 
        }

        if ( delivery == true ) {

            jTextAreaDataBase.append("\n******************************************");
            jTextAreaDataBase.append("\n******************************************");

            for (int i = 0; i < deliveries.size(); i++) {
                jTextAreaDataBase.append("\nENTREGA " + (i + 1) );
                jTextAreaDataBase.append("\nCódigo = " + deliveries.get(i).code + "\nTienda 1 = " + deliveries.get(i).store1 + "\nTienda 2 = " + deliveries.get(i).store2 + "\nFecha = " + deliveries.get(i).date + "\nCliente = " + deliveries.get(i).customer + "\nProducto = " + deliveries.get(i).product + "\nCantidad = " + deliveries.get(i).quantity + "\nPago = " + deliveries.get(i).payment + "\nAnticipo = " + deliveries.get(i).advance + "\nCrédito Utilizado = " + deliveries.get(i).creditUsed);
                jTextAreaDataBase.append("\n");
            }      
        }
        
        if ( sold == true ) {

            jTextAreaInfo.append("\n******************************************");
            jTextAreaInfo.append("\n******************************************");
            textLines.add("");
            textLines.add("******************************************");
            textLines.add("******************************************");

            for (int i = 0; i < solds.size(); i++) {
                jTextAreaInfo.append("\nPRODUCTOS VENDIDOS " + (i + 1) );
                jTextAreaInfo.append("\nCódigo = " + solds.get(i).code + "\nProducto = " + solds.get(i).product + "\nTienda = " + solds.get(i).store + "\nCantidad = " + solds.get(i).quantity);
                jTextAreaInfo.append("\n");
                textLines.add("*******");
                textLines.add("PRODUCTOS VENDIDOS " + (i + 1));
                textLines.add("Codigo = " + solds.get(i).code);
                textLines.add("Producto = " + solds.get(i).product);
                textLines.add("Tienda = " + solds.get(i).store);
                textLines.add("Cantidad = " + solds.get(i).quantity);
                textLines.add("*******");
            }      
        }          
    }    
    
    //****************************************************
    //****************************************************
    
    /***
     * To clear the main arrays
     */
    
    public void clearDatabaseArrays() {
        // We clear the arrays
        customers.clear();
        deliveries.clear();
        employees.clear();
        orders.clear();
        ordersReceived.clear();
        products.clear();
        sales.clear();
        stores.clear();
        times.clear();   
    }
    
    //*****************************************************
    
    /***
     * To know if is an integer typed
     * @param myText
     * @return 
     */
    
    public boolean isInteger ( String myText ) {
        char[] myTextArray = myText.toCharArray();
        boolean isInteger = false;
        
        for (int i = 0; i < myText.length() ; i++) {
            if ( myTextArray[i] == '0' || myTextArray[i] == '1' || myTextArray[i] == '2' || myTextArray[i] == '3' || myTextArray[i] == '4' || myTextArray[i] == '5' || myTextArray[i] == '6' || myTextArray[i] == '7' || myTextArray[i] == '8' || myTextArray[i] == '9' ) {
                isInteger = true;
            }
            else {
                return false;
            }
        }    
        
        return isInteger;
    }
    
     //*****************************************************
    
    /***
     * To know if is a decimal typed
     * @param myText
     * @return 
     */
    
    public boolean isDecimal ( String myText ) {
        char[] myTextArray = myText.toCharArray();
        boolean isDecimal = false;
        
        for (int i = 0; i < myText.length() ; i++) {
            if ( myTextArray[i] == '0' || myTextArray[i] == '1' || myTextArray[i] == '2' || myTextArray[i] == '3' || myTextArray[i] == '4' || myTextArray[i] == '5' || myTextArray[i] == '6' || myTextArray[i] == '7' || myTextArray[i] == '8' || myTextArray[i] == '9' || myTextArray[i] == '.' ) {
                isDecimal = true;
            }
            else {
                return false;
            }
        }    
        
        return isDecimal;
    }  
    
     //*****************************************************
    
    /***
     * To know if is a phone number typed
     * @param myText
     * @return 
     */
    
    public boolean isPhone ( String myText ) {
        char[] myTextArray = myText.toCharArray();
        boolean isDecimal = false;
        
        for (int i = 0; i < myText.length() ; i++) {
            if ( myTextArray[i] == '0' || myTextArray[i] == '1' || myTextArray[i] == '2' || myTextArray[i] == '3' || myTextArray[i] == '4' || myTextArray[i] == '5' || myTextArray[i] == '6' || myTextArray[i] == '7' || myTextArray[i] == '8' || myTextArray[i] == '9' || myTextArray[i] == '-' ) {
                isDecimal = true;
            }
            else {
                return false;
            }
        }    
        
        return isDecimal;
    }  
    
     //*****************************************************

    /***
     * To fill all comboboxes
     */
    
    public void fillComboBoxes() {
        try {
            
            PreparedStatement ps = connection.prepareStatement("USE `200130586_ipc2_proyecto1`;");
            //***********************
            // To fill the stores and products in the comboboxes
            ResultSet rs = ps.executeQuery("SELECT `code` FROM `200130586_ipc2_proyecto1`.`store`;");

            // We need to clear all comboboxes
            jComboBoxTopSalesStore.removeAllItems();
            jComboBoxInfoNoSalesStore.removeAllItems();
            jComboBoxTimeStore1.removeAllItems();
            jComboBoxTimeStore2.removeAllItems();
            jComboBoxProductsStore.removeAllItems();
            jComboBoxOrdersStore1.removeAllItems();
            jComboBoxOrdersStore2.removeAllItems();
            jComboBoxSalesStore.removeAllItems();
                                
            while (rs.next())
            {
                jComboBoxTopSalesStore.addItem(rs.getString("code"));
                jComboBoxInfoNoSalesStore.addItem(rs.getString("code"));
                jComboBoxTimeStore1.addItem(rs.getString("code"));
                jComboBoxTimeStore2.addItem(rs.getString("code"));
                jComboBoxProductsStore.addItem(rs.getString("code"));
                jComboBoxOrdersStore1.addItem(rs.getString("code"));
                jComboBoxOrdersStore2.addItem(rs.getString("code"));
                jComboBoxSalesStore.addItem(rs.getString("code"));
            }
            
            //***********************
            
            rs = ps.executeQuery("SELECT `code` FROM `200130586_ipc2_proyecto1`.`product` ORDER BY `code`;");
            jComboBoxOrdersProduct.removeAllItems();
            while (rs.next()) {
                jComboBoxOrdersProduct.addItem(rs.getString("code"));
            }
           
            rs = ps.executeQuery("SELECT `code` FROM `200130586_ipc2_proyecto1`.`product` ORDER BY `code`;");
            jComboBoxSalesProduct.removeAllItems();
            while (rs.next()) {
                jComboBoxSalesProduct.addItem(rs.getString("code"));
            }  
            
            // Order received            
            rs = ps.executeQuery("SELECT `code` FROM `200130586_ipc2_proyecto1`.`order` ORDER BY `code`;");
            jComboBoxOrdersReceivedCode.removeAllItems();
            while (rs.next()) {
                jComboBoxOrdersReceivedCode.addItem(rs.getString("code"));
            }  
            
            // Delivery          
            rs = ps.executeQuery("SELECT `code` FROM `200130586_ipc2_proyecto1`.`orderreceived` ORDER BY `code`;");
            jComboBoxDeliveryCode.removeAllItems();
            while (rs.next()) {
                jComboBoxDeliveryCode.addItem(rs.getString("code"));
            }             
            
            //***********************
            
            /*rs = st.executeQuery("SELECT * FROM `200130586_ipc2_proyecto1`.`order` WHERE `code` = '" + jComboBoxOrdersReceivedCode.getSelectedItem().toString() + "';");
            while (rs.next()) {
                jLabelOrdersReceivedStore1Message.setText(rs.getString("store1"));
                jLabelOrdersReceivedStore2Message.setText(rs.getString("store2"));
                jLabelOrdersReceivedDateMessage.setText(rs.getString("date"));
                jLabelOrdersReceivedCustomerMessage.setText(rs.getString("customer"));
                jLabelOrdersReceivedProductMessage.setText(rs.getString("product"));
                jLabelOrdersReceivedQuantityMessage.setText(rs.getString("quantity"));
                jLabelOrdersReceivedPaymentMessage.setText(rs.getString("payment"));
                jLabelOrdersReceivedAdvancetMessage.setText(rs.getString("advance"));
            } */
            
            //***********************
            
            // Customer's NIT
            rs = ps.executeQuery("SELECT `NIT` FROM `200130586_ipc2_proyecto1`.`customer`;");
            jComboBoxInfoBuyingsCustomer.removeAllItems();
            jComboBoxInfoOrdersCustomer.removeAllItems();
            jComboBoxOrdersCustomer.removeAllItems();
            jComboBoxSalesCustomer.removeAllItems();
            while (rs.next()) {
                jComboBoxInfoBuyingsCustomer.addItem(rs.getString("NIT"));
                jComboBoxInfoOrdersCustomer.addItem(rs.getString("NIT"));               
                jComboBoxOrdersCustomer.addItem(rs.getString("NIT"));
                jComboBoxSalesCustomer.addItem(rs.getString("NIT"));
            }            
            
            //***********************  
            ps.close();
        }
        catch (Exception e){
            System.err.println("Exception!");
            System.err.println(e.getMessage());
            jTextAreaInfo.append("\nHay alguna excepción con los ComboBoxes");
        }            
    }
}
